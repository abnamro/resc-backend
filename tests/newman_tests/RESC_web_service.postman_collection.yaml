info:
  _postman_id: 346abcc7-3f6d-4d60-8a15-afef6ed2070f
  name: Repository Scanner (RESC)
  description: RESC API helps you to perform several operations upon findings obtained from multiple source code repositories.
  schema: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
item:
  - name: resc/v1
    item:
      - name: health
        item:
          - name: Health check
            method: GET
            request: resc/v1/health
            status_code: 200
            response_time: 800
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson.status).to.be.a("string");
                  pm.expect(responseJson.status).to.eql("OK");
              });
      - name: common
        item:
          - name: Get supported vcs providers
            method: GET
            request: resc/v1/supported-vcs-providers
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array");
                  pm.expect(responseJson.length).to.eql(3);
                  pm.expect(responseJson).to.eql([ "AZURE_DEVOPS", "BITBUCKET", "GITHUB_PUBLIC" ] );
                  pm.expect(responseJson).to.include("AZURE_DEVOPS");
                  pm.expect(responseJson).to.include("BITBUCKET");
                  pm.expect(responseJson).to.include("GITHUB_PUBLIC");
              });
          - name: Auth check
            method: GET
            request: resc/v1/auth-check
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson.message).to.be.a("string");
                  pm.expect(responseJson.message).to.eql("OK");
              });
      - name: rule-packs
        item:
          - name: Upload rule pack in toml format when rule pack version already exists
            method: POST
            request: resc/v1/rule-packs?version=1.0.0
            status_code: 409
            response_time: 5000
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"]).to.eql("Unable to process rules. Rule pack version 1.0.0 already exists"); 
              });
            form_data:
              - key: rule_file
                contentType: application/octet-stream
                type: file
                src: gitleaks.toml
          - name: Upload rule pack in toml format when invalid rule pack version provided
            method: POST
            request: resc/v1/rule-packs?version=1.0
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("string_pattern_mismatch"); 
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("String should match pattern \'^\\d+(?:\\.\\d+){2}$\'");
              });
            form_data:
              - key: rule_file
                contentType: application/octet-stream
                type: file
                src: gitleaks.toml
          - name: Upload rule pack in toml format when invalid content type provided
            method: POST
            request: resc/v1/rule-packs?version=1.0.0
            status_code: 500
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"]).to.eql("Invalid document type, only TOML file is supported");
              });
            form_data:
              - key: rule_file
                contentType: ""
                type: file
                src: gitleaks.toml
          - name: Upload rule pack in toml format when invalid rule pack format provided
            method: POST
            request: resc/v1/rule-packs?version=1.0.0
            status_code: 500
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"]).to.eql("Invalid document type, only TOML file is supported");
              });
            form_data:
              - key: rule_file
                contentType: application/octet-stream
                type: file
                src: test.env
          - name: Mark rule pack as outdated when invalid rule pack version provided
            method: POST
            request: resc/v1/rule-packs/mark-as-outdated
            status_code: 404
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"]).to.eql("Rule pack not found.");
              });
            form_raw: "{\"version\": \"3.0.0\"}"
          - name: Mark rule pack as outdated when active rule pack version provided
            method: POST
            request: resc/v1/rule-packs/mark-as-outdated
            status_code: 403
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"]).to.eql("Rule pack is active.");
              });
            form_raw: "{\"version\": \"1.0.0\"}"
          - name: Mark rule pack as outdated when inactive rule pack version provided
            method: POST
            request: resc/v1/rule-packs/mark-as-outdated
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["audited"]).to.eql(0);
              });
            form_raw: "{\"version\": \"0.0.0\"}"
          - name: Get rule packs
            method: GET
            request: resc/v1/rule-packs/versions?skip=0&limit=100
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"][0]["version"]).to.eql("1.0.0");
                  pm.expect(responseJson["data"][0]["active"]).to.eql(true);
                  pm.expect(responseJson["data"][0]["outdated"]).to.eql(false);
                  pm.expect(responseJson["data"][0]["global_allow_list"]).to.be.greaterThan(0);
                  pm.expect(responseJson["data"][1]["version"]).to.eql("0.0.0");
                  pm.expect(responseJson["data"][1]["active"]).to.eql(false);
                  pm.expect(responseJson["data"][1]["outdated"]).to.eql(true);
                  pm.expect(responseJson["data"][1]["global_allow_list"]).to.be.greaterThan(0);
                  pm.expect(responseJson["total"]).to.eql(2);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get rule packs with invalid parameters
            method: GET
            request: resc/v1/rule-packs/versions?skip=invalid&limit=invalid
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
              
                  pm.expect(responseJson["detail"][1]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][1]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
              });
          - name: Get rule packs with version filter
            method: GET
            request: resc/v1/rule-packs/versions?version=1.0.0&skip=0&limit=100
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"][0]["version"]).to.eql("1.0.0");
                  pm.expect(responseJson["data"][0]["active"]).to.eql(true);
                  pm.expect(responseJson["data"][0]["global_allow_list"]).to.be.greaterThan(0);
                  pm.expect(responseJson["total"]).to.eql(1);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get rule packs with invalid version filter
            method: GET
            request: resc/v1/rule-packs/versions?version=1.0&skip=0&limit=100
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("string_pattern_mismatch");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("String should match pattern \'^\\d+(?:\\.\\d+){2}$\'");
              });
          - name: Get rule packs with active filter
            method: GET
            request: resc/v1/rule-packs/versions?active=true&skip=0&limit=100
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"][0]["version"]).to.eql("1.0.0");
                  pm.expect(responseJson["data"][0]["active"]).to.eql(true);
                  pm.expect(responseJson["data"][0]["global_allow_list"]).to.be.greaterThan(0);
                  pm.expect(responseJson["total"]).to.eql(1);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get rule packs with invalid active filter
            method: GET
            request: resc/v1/rule-packs/versions?active=invalid&skip=0&limit=100
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("bool_parsing");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be a valid boolean, unable to interpret input");
              });
          - name: Get rule packs with version and active filters
            method: GET
            request: resc/v1/rule-packs/versions?version=1.0.0&active=true&skip=0&limit=100
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"][0]["version"]).to.eql("1.0.0");
                  pm.expect(responseJson["data"][0]["active"]).to.eql(true);
                  pm.expect(responseJson["data"][0]["global_allow_list"]).to.be.greaterThan(0);
                  pm.expect(responseJson["total"]).to.eql(1);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get rule packs with non existent version filter
            method: GET
            request: resc/v1/rule-packs/versions?version=1.0.9&skip=0&limit=100
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array");
                  pm.expect(responseJson["data"].length).to.eql(0);
                  pm.expect(responseJson["total"]).to.eql(0);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Download rule pack in TOML format with non existent version
            method: GET
            request: resc/v1/rule-packs?rule_pack_version=1.0.9
            status_code: 404
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"]).to.eql("No rule pack found with version 1.0.9");
              });
          - name: Download rule pack in TOML format with invalid version
            method: GET
            request: resc/v1/rule-packs?rule_pack_version=1.0
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("string_pattern_mismatch");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("String should match pattern \'^\\d+(?:\\.\\d+){2}$\'");
              });
          - name: Download rule pack in TOML format when rule pack version exists
            method: GET
            request: resc/v1/rule-packs?rule_pack_version=1.0.0
            status_code: 200
            response_time: 10000
          - name: Get rule packs tags with no filter
            method: GET
            request: resc/v1/rule-packs/tags
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array");
                  pm.expect(responseJson.length).to.eql(2);
                  pm.expect(responseJson).to.eql(["Cli","Warn"] );
              });
          - name: Get rule packs tags with version filter
            method: GET
            request: resc/v1/rule-packs/tags?version=0.0.0
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array");
                  pm.expect(responseJson.length).to.eql(1);
                  pm.expect(responseJson).to.eql(["Warn"] );
              });
          - name: Get rule packs tags with multiple versions filter
            method: GET
            request: resc/v1/rule-packs/tags?version=1.0.0&version=1.0.1
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array");
                  pm.expect(responseJson.length).to.eql(2);
                  pm.expect(responseJson).to.eql(["Cli","Warn"] );
              });
          - name: Get rule packs tags with non existent  version filter
            method: GET
            request: resc/v1/rule-packs/tags?version=1.0.1
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array");
                  pm.expect(responseJson.length).to.eql(0);
              });
          - name: Get rule packs tags with invalid version filter
            method: GET
            request: resc/v1/rule-packs/tags?version=invalid
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array");
                  pm.expect(responseJson.length).to.eql(0);
              });
          - name: Get rule from rule pack with non existing rule
            method: GET
            request: resc/v1/rule-packs/1.0.0/rules?rule_name=non-existent-rule
            status_code: 404
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"]).to.eql("Rule not found");
              });
          - name: Get rule from rule pack with no rule
            method: GET
            request: resc/v1/rule-packs/1.0.0/rules
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("missing");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Field required");
              });
          - name: Get rule from rule pack with non existing rule pack
            method: GET
            request: resc/v1/rule-packs/wrong-rule-pack/rules?rule_name=non-existent-rule
            status_code: 404
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"]).to.eql("Rule not found");
              });
          - name: Get rule from rule pack with existing rule and rule pack
            method: GET
            request: resc/v1/rule-packs/1.0.0/rules?rule_name=github-oauth
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["rule_name"]).to.eql("github-oauth");
                  pm.expect(responseJson["rule_pack"]).to.eql("1.0.0");
                  pm.expect(responseJson["description"]).to.eql("GitHub OAuth Access Token");
                  pm.expect(responseJson["regex"]).to.eql("ya29\\\\.[0-9A-Za-z\\\\-_]++");
              });
      - name: vcs-instances
        item:
          - name: Create a vcs instance
            method: POST
            request: resc/v1/vcs-instances
            status_code: 201
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["id_"]).to.be.greaterThan(0);
                  pm.environment.set("vcs_instance_id", responseJson["id_"]);
                  pm.expect(responseJson["name"]).to.eql("AzureDevOps");
                  pm.expect(responseJson["provider_type"]).to.eql("AZURE_DEVOPS");
                  pm.expect(responseJson["hostname"]).to.eql("dev.azure.com");
                  pm.expect(responseJson["port"]).to.eql(443);
                  pm.expect(responseJson["scope"]).to.eql(["Project1", "Project2"]);
                  pm.expect(responseJson["scope"]).to.include("Project1");
                  pm.expect(responseJson["scope"]).to.include("Project2");
                  pm.expect(responseJson["exceptions"]).to.eql([]);
                  pm.expect(responseJson["organization"]).to.include("test-org");
              });
            form_raw: |-
              {
                "name": "AzureDevOps",
                "provider_type": "AZURE_DEVOPS",
                "hostname": "dev.azure.com",
                "port": 443,
                "scheme": "https",
                "exceptions": [],
                "scope": [
                  "Project1", "Project2"
                ],
                "organization": "test-org"
              }
          - name: Create a vcs instance with invalid body
            method: POST
            request: resc/v1/vcs-instances
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("enum");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be 'AZURE_DEVOPS', 'BITBUCKET' or 'GITHUB_PUBLIC'");
              
                  pm.expect(responseJson["detail"][1]["type"]).to.eql("value_error");
                  pm.expect(responseJson["detail"][1]["msg"]).to.eql("Value error, The scheme 'http/https' must be one of the following http, https");
              
                  pm.expect(responseJson["detail"][2]["type"]).to.eql("value_error");
                  pm.expect(responseJson["detail"][2]["msg"]).to.eql("Value error, You cannot specify both the scope and exceptions to the scan, only one setting is supported.");
              });
            form_raw: |-
              {
                "name": "Github",
                "provider_type": "Test-Provider",
                "hostname":"test-host",
                "port": "443",
                "scheme": "http/https",
                "exceptions": [
                  "Project1"
                ],
                "scope": [
                  "Project1"
                ],
                "organization":"test=org"
              }
          - name: Fetch a vcs instance by ID
            method: GET
            request: resc/v1/vcs-instances/:vcs_instance_id
            variables:
              - vcs_instance_id: "{{vcs_instance_id}}"
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["id_"]).to.eql(pm.environment.get("vcs_instance_id"));
                  pm.expect(responseJson["name"]).to.eql("AzureDevOps");
                  pm.expect(responseJson["provider_type"]).to.eql("AZURE_DEVOPS");
                  pm.expect(responseJson["hostname"]).to.eql("dev.azure.com");
                  pm.expect(responseJson["port"]).to.eql(443);
                  pm.expect(responseJson["scope"]).to.eql(["Project1", "Project2"]);
                  pm.expect(responseJson["scope"]).to.include("Project1");
                  pm.expect(responseJson["scope"]).to.include("Project2");
                  pm.expect(responseJson["exceptions"]).to.eql([]);
                  pm.expect(responseJson["organization"]).to.include("test-org");
              });
          - name: Fetch a vcs instance with non existent ID
            method: GET
            request: resc/v1/vcs-instances/:vcs_instance_id
            variables:
              - vcs_instance_id: 999
            status_code: 404
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"]).to.eql("VCS Instance not found");
              });
          - name: Get all vcs instances
            method: GET
            request: resc/v1/vcs-instances?skip=0&limit=100
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
              
                  pm.expect(responseJson.data[0]["id_"]).to.eql(1);
                  pm.expect(responseJson.data[0]["name"]).to.eql("AZURE_DEVOPS_ACCEPTANCE");
                  pm.expect(responseJson.data[0]["provider_type"]).to.eql("AZURE_DEVOPS");
                  pm.expect(responseJson.data[0]["hostname"]).to.eql("fake-dev.azure.com");
                  pm.expect(responseJson.data[0]["port"]).to.eql(443);
                  pm.expect(responseJson.data[0]["scope"]).to.eql(["ado-project1", "ado-project2"]);
                  pm.expect(responseJson.data[0]["scope"]).to.include("ado-project1");
                  pm.expect(responseJson.data[0]["scope"]).to.include("ado-project2");
                  pm.expect(responseJson.data[0]["exceptions"]).to.eql([]);
                  pm.expect(responseJson.data[0]["organization"]).to.include("ado-org");
              
                  pm.expect(responseJson.data[1]["id_"]).to.eql(2);
                  pm.expect(responseJson.data[1]["name"]).to.eql("BITBUCKET_DEV");
                  pm.expect(responseJson.data[1]["provider_type"]).to.eql("BITBUCKET");
                  pm.expect(responseJson.data[1]["hostname"]).to.eql("fake-bitbucket.com");
                  pm.expect(responseJson.data[1]["port"]).to.eql(443);
                  pm.expect(responseJson.data[1]["scope"]).to.eql([]);
                  pm.expect(responseJson.data[1]["exceptions"]).to.eql([]);
                  pm.expect(responseJson.data[1]["organization"]).to.eql(null);
              
                  pm.expect(responseJson.data[2]["id_"]).to.eql(pm.environment.get("vcs_instance_id"));
                  pm.expect(responseJson.data[2]["name"]).to.eql("AzureDevOps");
                  pm.expect(responseJson.data[2]["provider_type"]).to.eql("AZURE_DEVOPS");
                  pm.expect(responseJson.data[2]["hostname"]).to.eql("dev.azure.com");
                  pm.expect(responseJson.data[2]["port"]).to.eql(443);
                  pm.expect(responseJson.data[2]["scope"]).to.eql(["Project1", "Project2"]);
                  pm.expect(responseJson.data[2]["scope"]).to.include("Project1");
                  pm.expect(responseJson.data[2]["scope"]).to.include("Project2");
                  pm.expect(responseJson.data[2]["exceptions"]).to.eql([]);
                  pm.expect(responseJson.data[2]["organization"]).to.include("test-org");
              
                  pm.expect(responseJson["total"]).to.eql(3);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get all vcs instances with vcs provider filter
            method: GET
            request: resc/v1/vcs-instances?skip=0&limit=100&vcs_provider_type=AZURE_DEVOPS
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
              
                  pm.expect(responseJson.data[0]["id_"]).to.eql(1);
                  pm.expect(responseJson.data[0]["name"]).to.eql("AZURE_DEVOPS_ACCEPTANCE");
                  pm.expect(responseJson.data[0]["provider_type"]).to.eql("AZURE_DEVOPS");
                  pm.expect(responseJson.data[0]["hostname"]).to.eql("fake-dev.azure.com");
                  pm.expect(responseJson.data[0]["port"]).to.eql(443);
                  pm.expect(responseJson.data[0]["scope"]).to.eql(["ado-project1", "ado-project2"]);
                  pm.expect(responseJson.data[0]["scope"]).to.include("ado-project1");
                  pm.expect(responseJson.data[0]["scope"]).to.include("ado-project2");
                  pm.expect(responseJson.data[0]["exceptions"]).to.eql([]);
                  pm.expect(responseJson.data[0]["organization"]).to.include("ado-org");
              
                  pm.expect(responseJson.data[1]["id_"]).to.eql(pm.environment.get("vcs_instance_id"));
                  pm.expect(responseJson.data[1]["name"]).to.eql("AzureDevOps");
                  pm.expect(responseJson.data[1]["provider_type"]).to.eql("AZURE_DEVOPS");
                  pm.expect(responseJson.data[1]["hostname"]).to.eql("dev.azure.com");
                  pm.expect(responseJson.data[1]["port"]).to.eql(443);
                  pm.expect(responseJson.data[1]["scope"]).to.eql(["Project1", "Project2"]);
                  pm.expect(responseJson.data[1]["scope"]).to.include("Project1");
                  pm.expect(responseJson.data[1]["scope"]).to.include("Project2");
                  pm.expect(responseJson.data[1]["exceptions"]).to.eql([]);
                  pm.expect(responseJson.data[1]["organization"]).to.include("test-org");
                  
                  pm.expect(responseJson["total"]).to.eql(2);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get all vcs instances with non exisiting vcs provider in filter
            method: GET
            request: resc/v1/vcs-instances?skip=0&limit=100&vcs_provider_type=notexists
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("enum");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be 'AZURE_DEVOPS', 'BITBUCKET' or 'GITHUB_PUBLIC'");
              });
          - name: Get all vcs instances with vcs instance name filter
            method: GET
            request: resc/v1/vcs-instances?skip=0&limit=100&vcs_instance_name=AzureDevOps
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson.data[0]["id_"]).to.eql(pm.environment.get("vcs_instance_id"));
                  pm.expect(responseJson.data[0]["name"]).to.eql("AzureDevOps");
                  pm.expect(responseJson.data[0]["provider_type"]).to.eql("AZURE_DEVOPS");
                  pm.expect(responseJson.data[0]["hostname"]).to.eql("dev.azure.com");
                  pm.expect(responseJson.data[0]["port"]).to.eql(443);
                  pm.expect(responseJson.data[0]["scope"]).to.eql(["Project1", "Project2"]);
                  pm.expect(responseJson.data[0]["scope"]).to.include("Project1");
                  pm.expect(responseJson.data[0]["scope"]).to.include("Project2");
                  pm.expect(responseJson.data[0]["exceptions"]).to.eql([]);
                  pm.expect(responseJson.data[0]["organization"]).to.include("test-org");
                  pm.expect(responseJson["total"]).to.eql(1);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get all vcs instances with non existent vcs instance name in filter
            method: GET
            request: resc/v1/vcs-instances?skip=0&limit=100&vcs_instance_name=notexists
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array").that.is.empty;
                  pm.expect(responseJson["total"]).to.eql(0);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              
              });
          - name: Get all vcs instances with vcs provider and vcs instance name filter
            method: GET
            request: resc/v1/vcs-instances?skip=0&limit=100&vcs_provider_type=AZURE_DEVOPS&vcs_instance_name=AzureDevOps
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson.data[0]["id_"]).to.eql(pm.environment.get("vcs_instance_id"));
                  pm.expect(responseJson.data[0]["name"]).to.eql("AzureDevOps");
                  pm.expect(responseJson.data[0]["provider_type"]).to.eql("AZURE_DEVOPS");
                  pm.expect(responseJson.data[0]["hostname"]).to.eql("dev.azure.com");
                  pm.expect(responseJson.data[0]["port"]).to.eql(443);
                  pm.expect(responseJson.data[0]["scope"]).to.eql(["Project1", "Project2"]);
                  pm.expect(responseJson.data[0]["scope"]).to.include("Project1");
                  pm.expect(responseJson.data[0]["scope"]).to.include("Project2");
                  pm.expect(responseJson.data[0]["exceptions"]).to.eql([]);
                  pm.expect(responseJson.data[0]["organization"]).to.include("test-org");
                  pm.expect(responseJson["total"]).to.eql(1);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Update a vcs instance
            method: PUT
            request: resc/v1/vcs-instances/:vcs_instance_id
            variables:
              - vcs_instance_id: "{{vcs_instance_id}}"
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["id_"]).to.eql(pm.environment.get("vcs_instance_id"));
                  pm.expect(responseJson["name"]).to.eql("AzureDevOps");
                  pm.expect(responseJson["provider_type"]).to.eql("AZURE_DEVOPS");
                  pm.expect(responseJson["hostname"]).to.eql("dev.azure.com");
                  pm.expect(responseJson["port"]).to.eql(443);
                  pm.expect(responseJson["scope"]).to.eql(["Project1", "Project2"]);
                  pm.expect(responseJson["scope"]).to.include("Project1");
                  pm.expect(responseJson["scope"]).to.include("Project2");
                  pm.expect(responseJson["exceptions"]).to.eql([]);
                  pm.expect(responseJson["organization"]).to.include("test-org");
              });
            form_raw: |-
              {
                "name": "AzureDevOps",
                "provider_type": "AZURE_DEVOPS",
                "hostname": "dev.azure.com",
                "port": 443,
                "scheme": "https",
                "exceptions": [],
                "scope": [
                  "Project1", "Project2"
                ],
                "organization": "test-org"
              }
          - name: Update a vcs instance with non existent id
            method: PUT
            request: resc/v1/vcs-instances/:vcs_instance_id
            variables:
              - vcs_instance_id: 999
            status_code: 404
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"]).to.eql("VCS instance not found");
              });
            form_raw: |-
              {
                "name": "TestProvider",
                "provider_type": "AZURE_DEVOPS",
                "hostname": "test-host",
                "port": 443,
                "scheme": "http",
                "exceptions": [],
                "scope": [
                  "Project1"
                ],
                "organization": "test-org"
              }
          - name: Update a vcs instance with invalid body
            method: PUT
            request: resc/v1/vcs-instances/:vcs_instance_id
            variables:
              - vcs_instance_id: "{{vcs_instance_id}}"
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("enum");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be 'AZURE_DEVOPS', 'BITBUCKET' or 'GITHUB_PUBLIC'");
              
                  pm.expect(responseJson["detail"][1]["type"]).to.eql("value_error");
                  pm.expect(responseJson["detail"][1]["msg"]).to.eql("Value error, The scheme 'http/https' must be one of the following http, https");
              
                  pm.expect(responseJson["detail"][2]["type"]).to.eql("value_error");
                  pm.expect(responseJson["detail"][2]["msg"]).to.eql("Value error, You cannot specify both the scope and exceptions to the scan, only one setting is supported.");
              });
            form_raw: |-
              {
                "name": "Github",
                "provider_type": "Test-Provider",
                "hostname":"test-host",
                "port": "443",
                "scheme": "http/https",
                "exceptions": [
                  "Project1"
                ],
                "scope": [
                  "Project1"
                ],
                "organization":"test=org"
              }
          - name: Delete a vcs instance which doesn't exist
            method: DELETE
            request: resc/v1/vcs-instances/:vcs_instance_id
            variables:
              - vcs_instance_id: 999
            status_code: 404
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"]).to.eql("VCS instance not found");
              });
          - name: Delete a vcs instance with invalid id
            method: DELETE
            request: resc/v1/vcs-instances/:vcs_instance_id
            variables:
              - vcs_instance_id: one
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
              });
      - name: repositories
        item:
          - name: Create a repository
            method: POST
            request: resc/v1/repositories
            status_code: 201
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["id_"]).to.be.greaterThan(0);
                  pm.environment.set("repository_id", responseJson["id_"]);
                  pm.expect(responseJson["project_key"]).to.eql("test-project");
                  pm.expect(responseJson["repository_id"]).to.eql("test-repository-id1");
                  pm.expect(responseJson["repository_name"]).to.eql("test-repository");
                  pm.expect(responseJson["repository_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository");
                  pm.expect(responseJson["vcs_instance"]).to.eql(pm.environment.get("vcs_instance_id"));
              });
            form_raw: |-
              {
                "project_key": "test-project",
                "repository_id": "test-repository-id1",
                "repository_name": "test-repository",
                "repository_url": "https://dev.azure.com/test-org/test-project/_git/test-repository",
                "vcs_instance": {{vcs_instance_id}}
              }
          - name: Create a repository with invalid body
            method: POST
            request: resc/v1/repositories
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("url_parsing");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be a valid URL, relative URL without a base");
              });
            form_raw: |-
              {
                "project_key": "test-project",
                "repository_id": "test-repository-id",
                "repository_name": "test-repository",
                "repository_url": "github.com",
                "vcs_instance": {{vcs_instance_id}}
              }
          - name: Create a repository with non existent vcs instance ID
            method: POST
            request: resc/v1/repositories
            status_code: 500
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"]).to.eql("Internal server error. Contact your system administrator");
              });
            form_raw: |-
              {
                "project_key": "test-project",
                "repository_id": "test-repository-id1",
                "repository_name": "test-repository",
                "repository_url": "https://dev.azure.com/test-org/test-project/_git/test-repository",
                "vcs_instance": 999
              }
          - name: Fetch a repository by ID
            method: GET
            request: resc/v1/repositories/:repository_id
            variables:
              - repository_id: "{{repository_id}}"
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["id_"]).to.eql(pm.environment.get("repository_id"));
                  pm.expect(responseJson["project_key"]).to.eql("test-project");
                  pm.expect(responseJson["repository_id"]).to.eql("test-repository-id1");
                  pm.expect(responseJson["repository_name"]).to.eql("test-repository");
                  pm.expect(responseJson["repository_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository");
                  pm.expect(responseJson["vcs_instance"]).to.eql(pm.environment.get("vcs_instance_id"));
              });
          - name: Fetch a repository by non existent ID
            method: GET
            request: resc/v1/repositories/:repository_id
            variables:
              - repository_id: 999
            status_code: 404
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"]).to.eql("Repository not found");
              });
          - name: Fetch a repository by invalid ID
            method: GET
            request: resc/v1/repositories/:repository_id
            variables:
              - repository_id: one
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
              });
          - name: Get all repositories
            method: GET
            request: resc/v1/repositories?skip=0&limit=100
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
              
                  pm.expect(responseJson.data[0]["id_"]).to.eql(1);
                  pm.expect(responseJson.data[0]["project_key"]).to.eql("ado-project1");
                  pm.expect(responseJson.data[0]["repository_id"]).to.eql("r1");
                  pm.expect(responseJson.data[0]["repository_name"]).to.eql("resc-dummy1");
                  pm.expect(responseJson.data[0]["repository_url"]).to.eql("https://fake-dev.azure.com/ado-org/ado-project1/_git/resc-dummy1");
                  pm.expect(responseJson.data[0]["vcs_instance"]).to.eql(1);
              
                  pm.expect(responseJson.data[1]["id_"]).to.eql(2);
                  pm.expect(responseJson.data[1]["project_key"]).to.eql("ado-project2");
                  pm.expect(responseJson.data[1]["repository_id"]).to.eql("r2");
                  pm.expect(responseJson.data[1]["repository_name"]).to.eql("resc-dummy2");
                  pm.expect(responseJson.data[1]["repository_url"]).to.eql("https://fake-dev.azure.com/ado-org/ado-project2/_git/resc-dummy2");
                  pm.expect(responseJson.data[1]["vcs_instance"]).to.eql(1);
              
                  pm.expect(responseJson.data[2]["id_"]).to.eql(3);
                  pm.expect(responseJson.data[2]["project_key"]).to.eql("btbk-project1");
                  pm.expect(responseJson.data[2]["repository_id"]).to.eql("r3");
                  pm.expect(responseJson.data[2]["repository_name"]).to.eql("resc-dummy3");
                  pm.expect(responseJson.data[2]["repository_url"]).to.eql("https://fake-bitbucket.com/scm/r3/resc-dummy3.git");
                  pm.expect(responseJson.data[2]["vcs_instance"]).to.eql(2);
              
                  pm.expect(responseJson.data[3]["id_"]).to.eql(pm.environment.get("repository_id"));
                  pm.expect(responseJson.data[3]["project_key"]).to.eql("test-project");
                  pm.expect(responseJson.data[3]["repository_id"]).to.eql("test-repository-id1");
                  pm.expect(responseJson.data[3]["repository_name"]).to.eql("test-repository");
                  pm.expect(responseJson.data[3]["repository_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository");
                  pm.expect(responseJson.data[3]["vcs_instance"]).to.eql(pm.environment.get("vcs_instance_id"));
              
                  pm.expect(responseJson["total"]).to.eql(4);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get all repositories with project filter
            method: GET
            request: resc/v1/repositories?skip=0&limit=100&project_filter=test-project
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson.data[0]["id_"]).to.eql(pm.environment.get("repository_id"));
                  pm.expect(responseJson.data[0]["project_key"]).to.eql("test-project");
                  pm.expect(responseJson.data[0]["repository_id"]).to.eql("test-repository-id1");
                  pm.expect(responseJson.data[0]["repository_name"]).to.eql("test-repository");
                  pm.expect(responseJson.data[0]["repository_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository");
                  pm.expect(responseJson.data[0]["vcs_instance"]).to.eql(pm.environment.get("vcs_instance_id"));
                  pm.expect(responseJson["total"]).to.eql(1);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get all repositories with non existent project filter
            method: GET
            request: resc/v1/repositories?skip=0&limit=100&project_filter=test-project
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson.data[0]["id_"]).to.eql(pm.environment.get("repository_id"));
                  pm.expect(responseJson.data[0]["project_key"]).to.eql("test-project");
                  pm.expect(responseJson.data[0]["repository_id"]).to.eql("test-repository-id1");
                  pm.expect(responseJson.data[0]["repository_name"]).to.eql("test-repository");
                  pm.expect(responseJson.data[0]["repository_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository");
                  pm.expect(responseJson.data[0]["vcs_instance"]).to.eql(pm.environment.get("vcs_instance_id"));
              });
          - name: Get all repositories with repository filter
            method: GET
            request: resc/v1/repositories?skip=0&limit=100&repository_filter=test-repository
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson.data[0]["id_"]).to.eql(pm.environment.get("repository_id"));
                  pm.expect(responseJson.data[0]["project_key"]).to.eql("test-project");
                  pm.expect(responseJson.data[0]["repository_id"]).to.eql("test-repository-id1");
                  pm.expect(responseJson.data[0]["repository_name"]).to.eql("test-repository");
                  pm.expect(responseJson.data[0]["repository_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository");
                  pm.expect(responseJson.data[0]["vcs_instance"]).to.eql(pm.environment.get("vcs_instance_id"));
                  pm.expect(responseJson["total"]).to.eql(1);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get all repositories with non existent repository filter
            method: GET
            request: resc/v1/repositories?skip=0&limit=100&repository_filter=notexists
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array").that.is.empty;
                  pm.expect(responseJson["total"]).to.eql(0);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get all repositories with vcs provider filter
            method: GET
            request: resc/v1/repositories?skip=0&limit=100&vcs_provider=AZURE_DEVOPS
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
              
                  pm.expect(responseJson.data[0]["id_"]).to.eql(1);
                  pm.expect(responseJson.data[0]["project_key"]).to.eql("ado-project1");
                  pm.expect(responseJson.data[0]["repository_id"]).to.eql("r1");
                  pm.expect(responseJson.data[0]["repository_name"]).to.eql("resc-dummy1");
                  pm.expect(responseJson.data[0]["repository_url"]).to.eql("https://fake-dev.azure.com/ado-org/ado-project1/_git/resc-dummy1");
                  pm.expect(responseJson.data[0]["vcs_instance"]).to.eql(1);
              
              
                  pm.expect(responseJson.data[1]["id_"]).to.eql(2);
                  pm.expect(responseJson.data[1]["project_key"]).to.eql("ado-project2");
                  pm.expect(responseJson.data[1]["repository_id"]).to.eql("r2");
                  pm.expect(responseJson.data[1]["repository_name"]).to.eql("resc-dummy2");
                  pm.expect(responseJson.data[1]["repository_url"]).to.eql("https://fake-dev.azure.com/ado-org/ado-project2/_git/resc-dummy2");
                  pm.expect(responseJson.data[1]["vcs_instance"]).to.eql(1);
              
                  pm.expect(responseJson.data[2]["id_"]).to.eql(pm.environment.get("repository_id"));
                  pm.expect(responseJson.data[2]["project_key"]).to.eql("test-project");
                  pm.expect(responseJson.data[2]["repository_id"]).to.eql("test-repository-id1");
                  pm.expect(responseJson.data[2]["repository_name"]).to.eql("test-repository");
                  pm.expect(responseJson.data[2]["repository_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository");
                  pm.expect(responseJson.data[2]["vcs_instance"]).to.eql(pm.environment.get("vcs_instance_id"));
              
                  pm.expect(responseJson["total"]).to.eql(3);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get all repositories with invalid vcs provider filter
            method: GET
            request: resc/v1/repositories?skip=0&limit=100&vcs_provider=invalid
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("enum");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be 'AZURE_DEVOPS', 'BITBUCKET' or 'GITHUB_PUBLIC'");
              });
          - name: Get all repositories with vcs provider, project and repository filter
            method: GET
            request: resc/v1/repositories?skip=0&limit=100&vcs_provider=AZURE_DEVOPS&project_filter=test-project&repository_filter=test-repository
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson.data[0]["id_"]).to.eql(pm.environment.get("repository_id"));
                  pm.expect(responseJson.data[0]["project_key"]).to.eql("test-project");
                  pm.expect(responseJson.data[0]["repository_id"]).to.eql("test-repository-id1");
                  pm.expect(responseJson.data[0]["repository_name"]).to.eql("test-repository");
                  pm.expect(responseJson.data[0]["repository_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository");
                  pm.expect(responseJson.data[0]["vcs_instance"]).to.eql(pm.environment.get("vcs_instance_id"));
                  pm.expect(responseJson["total"]).to.eql(1);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Update a repository
            method: PUT
            request: resc/v1/repositories/:repository_id
            variables:
              - repository_id: "{{repository_id}}"
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["id_"]).to.eql(pm.environment.get("repository_id"));
                  pm.expect(responseJson["vcs_instance"]).to.eql(pm.environment.get("vcs_instance_id"));
                  pm.expect(responseJson["project_key"]).to.eql("test-project");
                  pm.expect(responseJson["repository_id"]).to.eql("test-repository-id1");
                  pm.expect(responseJson["repository_name"]).to.eql("test-repository");
                  pm.expect(responseJson["repository_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository");
              });
            form_raw: |-
              {
                "project_key": "test-project",
                "repository_id": "test-repository-id1",
                "repository_name": "test-repository",
                "repository_url": "https://dev.azure.com/test-org/test-project/_git/test-repository",
                "vcs_instance": {{vcs_instance_id}}
              }
          - name: Update a repository with non existent ID
            method: PUT
            request: resc/v1/repositories/:repository_id
            variables:
              - repository_id: 999
            status_code: 404
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"]).to.eql("Repository not found");
              });
            form_raw: |-
              {
                "project_key": "test-project",
                "repository_id": "test-repository-id1",
                "repository_name": "test-repository",
                "repository_url": "https://dev.azure.com/test-org/test-project/_git/test-repository",
                "vcs_instance": {{vcs_instance_id}}
              }
          - name: Update a repository with invalid body
            method: PUT
            request: resc/v1/repositories/:repository_id
            variables:
              - repository_id: "{{repository_id}}"
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("url_parsing");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be a valid URL, relative URL without a base");
                  pm.expect(responseJson["detail"][1]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][1]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
              });
            form_raw: |-
              {
                "project_key": "test-project",
                "repository_id": "test-repository-id1",
                "repository_name": "test-repository",
                "repository_url": "dev.azure.com",
                "vcs_instance": "str"
              }
          - name: Get all unique project names
            method: GET
            request: resc/v1/repositories/distinct-projects/?only_if_has_findings=false
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array");
                  pm.expect(responseJson.length).to.eql(4);
                  pm.expect(responseJson).to.eql(["ado-project1","ado-project2","btbk-project1","test-project"] );
                  pm.expect(responseJson).to.include("ado-project1");
                  pm.expect(responseJson).to.include("ado-project2");
                  pm.expect(responseJson).to.include("btbk-project1");
                  pm.expect(responseJson).to.include("test-project");
              });
          - name: Get all unique project names for which findings exist
            method: GET
            request: resc/v1/repositories/distinct-projects/?only_if_has_findings=true
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array");
                  pm.expect(responseJson.length).to.eql(2);
                  pm.expect(responseJson).to.eql(["ado-project1","ado-project2"]);
                  pm.expect(responseJson).to.include("ado-project1");
                  pm.expect(responseJson).to.include("ado-project2");
              });
          - name: Get all unique project names without exinsting finding constraint
            method: GET
            request: resc/v1/repositories/distinct-projects/?only_if_has_findings=false
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array");
                  pm.expect(responseJson.length).to.eql(4);
                  pm.expect(responseJson).to.eql(["ado-project1","ado-project2","btbk-project1","test-project"] );
                  pm.expect(responseJson).to.include("ado-project1");
                  pm.expect(responseJson).to.include("ado-project2");
                  pm.expect(responseJson).to.include("btbk-project1");
                  pm.expect(responseJson).to.include("test-project");
              });
          - name: Get all unique project names with repository filter
            method: GET
            request: resc/v1/repositories/distinct-projects/?repository_filter=test-repository&only_if_has_findings=false
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array");
                  pm.expect(responseJson.length).to.eql(1);
                  pm.expect(responseJson).to.eql(["test-project"] );
                  pm.expect(responseJson).to.include("test-project");
              });
          - name: Get all unique project names with non existent repository filter
            method: GET
            request: resc/v1/repositories/distinct-projects/?repository_filter=nonexistent&only_if_has_findings=false
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array").that.is.empty;;
              });
          - name: Get all unique project names with vcs provider filter
            method: GET
            request: resc/v1/repositories/distinct-projects/?vcs_provider=AZURE_DEVOPS&only_if_has_findings=false
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array");
                  pm.expect(responseJson.length).to.eql(3);
                  pm.expect(responseJson).to.eql(["ado-project1","ado-project2","test-project"]);
                  pm.expect(responseJson).to.include("ado-project1");
                  pm.expect(responseJson).to.include("ado-project2");
                  pm.expect(responseJson).to.include("test-project");
              });
          - name: Get all unique project names with invalid vcs provider filter
            method: GET
            request: resc/v1/repositories/distinct-projects/?vcs_provider=invalid&only_if_has_findings=false
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("enum");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be 'AZURE_DEVOPS', 'BITBUCKET' or 'GITHUB_PUBLIC'");
              });
          - name: Get all unique project names with vcs provider and repository filters
            method: GET
            request: resc/v1/repositories/distinct-projects/?vcs_provider=AZURE_DEVOPS&repository_filter=test-repository&only_if_has_findings=false
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array");
                  pm.expect(responseJson.length).to.eql(1);
                  pm.expect(responseJson).to.eql(["test-project"]);
                  pm.expect(responseJson).to.include("test-project");
              });
          - name: Get all unique repository names
            method: GET
            request: resc/v1/repositories/distinct-repositories/?only_if_has_findings=false
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array");
                  pm.expect(responseJson.length).to.eql(4);
                  pm.expect(responseJson).to.eql(["resc-dummy1","resc-dummy2","resc-dummy3","test-repository"] );
                  pm.expect(responseJson).to.include("resc-dummy1");
                  pm.expect(responseJson).to.include("resc-dummy2");
                  pm.expect(responseJson).to.include("resc-dummy3");
                  pm.expect(responseJson).to.include("test-repository");
              });
          - name: Get all unique repository names for which findings exist
            method: GET
            request: resc/v1/repositories/distinct-repositories/?only_if_has_findings=true
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array");
                  pm.expect(responseJson.length).to.eql(2);
                  
              });
          - name: Get all unique repository names with vcs provider filter
            method: GET
            request: resc/v1/repositories/distinct-repositories/?vcs_provider=AZURE_DEVOPS&only_if_has_findings=false
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array");
                  pm.expect(responseJson.length).to.eql(3);
                  pm.expect(responseJson).to.eql(["resc-dummy1","resc-dummy2","test-repository"] );
                  pm.expect(responseJson).to.include("resc-dummy1");
                  pm.expect(responseJson).to.include("resc-dummy2");
                  pm.expect(responseJson).to.include("test-repository");
              });
          - name: Get all unique repository names with invalid vcs provider filter
            method: GET
            request: resc/v1/repositories/distinct-repositories/?vcs_provider=invalid&only_if_has_findings=false
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("enum");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be 'AZURE_DEVOPS', 'BITBUCKET' or 'GITHUB_PUBLIC'");
              });
          - name: Get all unique repository names with project name filter
            method: GET
            request: resc/v1/repositories/distinct-repositories/?project_name=test-project&only_if_has_findings=false
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array");
                  pm.expect(responseJson.length).to.eql(1);
                  pm.expect(responseJson).to.eql(["test-repository"] );
                  pm.expect(responseJson).to.include("test-repository");
              });
          - name: Get all unique repository names with non existent project name filter
            method: GET
            request: resc/v1/repositories/distinct-repositories/?project_name=nonexistent&only_if_has_findings=false
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array").that.is.empty;;
              });
          - name: Get all unique repository names with vcs provider and project name filter
            method: GET
            request: resc/v1/repositories/distinct-repositories/?vcs_provider=AZURE_DEVOPS&project_name=test-project&only_if_has_findings=false
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array");
                  pm.expect(responseJson.length).to.eql(1);
                  pm.expect(responseJson).to.eql(["test-repository"] );
                  pm.expect(responseJson).to.include("test-repository");
              });
          - name: Get findings metadata for a repository
            method: GET
            request: resc/v1/repositories/:repository_id/findings-metadata
            variables:
              - repository_id: "{{repository_id}}"
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]["id_"]).to.eql(pm.environment.get("repository_id"));
                  pm.expect(responseJson["data"]["project_key"]).to.eql("test-project");
                  pm.expect(responseJson["data"]["repository_id"]).to.eql("test-repository-id1");
                  pm.expect(responseJson["data"]["repository_name"]).to.eql("test-repository");
                  pm.expect(responseJson["data"]["repository_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository");
                  pm.expect(responseJson["data"]["vcs_instance"]).to.eql(pm.environment.get("vcs_instance_id"));
                  pm.expect(responseJson["true_positive"]).to.eql(0);
                  pm.expect(responseJson["false_positive"]).to.eql(0);
                  pm.expect(responseJson["not_analyzed"]).to.eql(0);
                  pm.expect(responseJson["not_accessible"]).to.eql(0);
                  pm.expect(responseJson["clarification_required"]).to.eql(0);
                  pm.expect(responseJson["outdated"]).to.eql(0);
                  pm.expect(responseJson["total_findings_count"]).to.eql(0);
              });
          - name: Get all repositories with findings metadata
            method: GET
            request: resc/v1/repositories/findings-metadata/?skip=0&limit=100&only_if_has_findings=false
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
              
                  pm.expect(responseJson["data"][0]["id_"]).to.eql(1);
                  pm.expect(responseJson["data"][0]["project_key"]).to.eql("ado-project1");
                  pm.expect(responseJson["data"][0]["repository_id"]).to.eql("r1");
                  pm.expect(responseJson["data"][0]["repository_name"]).to.eql("resc-dummy1");
                  pm.expect(responseJson["data"][0]["repository_url"]).to.eql("https://fake-dev.azure.com/ado-org/ado-project1/_git/resc-dummy1");
                  pm.expect(responseJson["data"][0]["vcs_provider"]).to.eql("AZURE_DEVOPS");
                  pm.expect(responseJson["data"][0]["last_scan_id"]).to.eql(4);
                  pm.expect(responseJson["data"][0]["last_scan_timestamp"]).to.eql("2023-07-15T00:00:00");
                  pm.expect(responseJson["data"][0]["true_positive"]).to.eql(1);
                  pm.expect(responseJson["data"][0]["false_positive"]).to.eql(0);
                  pm.expect(responseJson["data"][0]["not_analyzed"]).to.eql(1);
                  pm.expect(responseJson["data"][0]["not_accessible"]).to.eql(0);
                  pm.expect(responseJson["data"][0]["clarification_required"]).to.eql(0);
                  pm.expect(responseJson["data"][0]["outdated"]).to.eql(0);
                  pm.expect(responseJson["data"][0]["total_findings_count"]).to.eql(2);
              
                  pm.expect(responseJson["data"][1]["id_"]).to.eql(2);
                  pm.expect(responseJson["data"][1]["project_key"]).to.eql("ado-project2");
                  pm.expect(responseJson["data"][1]["repository_id"]).to.eql("r2");
                  pm.expect(responseJson["data"][1]["repository_name"]).to.eql("resc-dummy2");
                  pm.expect(responseJson["data"][1]["repository_url"]).to.eql("https://fake-dev.azure.com/ado-org/ado-project2/_git/resc-dummy2");
                  pm.expect(responseJson["data"][1]["vcs_provider"]).to.eql("AZURE_DEVOPS");
                  pm.expect(responseJson["data"][1]["last_scan_id"]).to.eql(6);
                  pm.expect(responseJson["data"][1]["last_scan_timestamp"]).to.eql("2023-07-15T00:00:00");
                  pm.expect(responseJson["data"][1]["true_positive"]).to.eql(0);
                  pm.expect(responseJson["data"][1]["false_positive"]).to.eql(0);
                  pm.expect(responseJson["data"][1]["not_analyzed"]).to.eql(4);
                  pm.expect(responseJson["data"][1]["not_accessible"]).to.eql(0);
                  pm.expect(responseJson["data"][1]["clarification_required"]).to.eql(0);
                  pm.expect(responseJson["data"][1]["outdated"]).to.eql(0);
                  pm.expect(responseJson["data"][1]["total_findings_count"]).to.eql(4);
              
                  pm.expect(responseJson["data"][2]["id_"]).to.eql(3);
                  pm.expect(responseJson["data"][2]["project_key"]).to.eql("btbk-project1");
                  pm.expect(responseJson["data"][2]["repository_id"]).to.eql("r3");
                  pm.expect(responseJson["data"][2]["repository_name"]).to.eql("resc-dummy3");
                  pm.expect(responseJson["data"][2]["repository_url"]).to.eql("https://fake-bitbucket.com/scm/r3/resc-dummy3.git");
                  pm.expect(responseJson["data"][2]["vcs_provider"]).to.eql("BITBUCKET");
                  pm.expect(responseJson["data"][2]["last_scan_id"]).to.eql(null);
                  pm.expect(responseJson["data"][2]["last_scan_timestamp"]).to.eql(null);
                  pm.expect(responseJson["data"][2]["true_positive"]).to.eql(0);
                  pm.expect(responseJson["data"][2]["false_positive"]).to.eql(0);
                  pm.expect(responseJson["data"][2]["not_analyzed"]).to.eql(0);
                  pm.expect(responseJson["data"][2]["not_accessible"]).to.eql(0);
                  pm.expect(responseJson["data"][2]["clarification_required"]).to.eql(0);
                  pm.expect(responseJson["data"][2]["outdated"]).to.eql(0);
                  pm.expect(responseJson["data"][2]["total_findings_count"]).to.eql(0);
              
              
                  pm.expect(responseJson["data"][3]["id_"]).to.eql(pm.environment.get("repository_id"));
                  pm.expect(responseJson["data"][3]["project_key"]).to.eql("test-project");
                  pm.expect(responseJson["data"][3]["repository_id"]).to.eql("test-repository-id1");
                  pm.expect(responseJson["data"][3]["repository_name"]).to.eql("test-repository");
                  pm.expect(responseJson["data"][3]["repository_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository");
                  pm.expect(responseJson["data"][3]["vcs_provider"]).to.eql("AZURE_DEVOPS");
                  pm.expect(responseJson["data"][3]["last_scan_id"]).to.eql(null);
                  pm.expect(responseJson["data"][3]["last_scan_timestamp"]).to.eql(null);
                  pm.expect(responseJson["data"][3]["true_positive"]).to.eql(0);
                  pm.expect(responseJson["data"][3]["false_positive"]).to.eql(0);
                  pm.expect(responseJson["data"][3]["not_analyzed"]).to.eql(0);
                  pm.expect(responseJson["data"][3]["not_accessible"]).to.eql(0);
                  pm.expect(responseJson["data"][3]["clarification_required"]).to.eql(0);
                  pm.expect(responseJson["data"][3]["outdated"]).to.eql(0);
                  pm.expect(responseJson["data"][3]["total_findings_count"]).to.eql(0);
              
                  pm.expect(responseJson["total"]).to.eql(4);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get latest scan for a repository with non existent ID
            method: GET
            request: resc/v1/repositories/:repository_id/last-scan
            variables:
              - repository_id: 999
            status_code: 404
            response_time: 300
          - name: Get latest scan for a repository with invalid ID
            method: GET
            request: resc/v1/repositories/:repository_id/last-scan
            variables:
              - repository_id: invalid
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
              });
          - name: Get scans for a repository
            method: GET
            request: resc/v1/repositories/:repository_id/scans
            variables:
              - repository_id: "{{repository_id}}"
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array");
                  pm.expect(responseJson["data"].length).to.eql(0);
                  pm.expect(responseJson["total"]).to.eql(0);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get scans for a repository with non existent ID
            method: GET
            request: resc/v1/repositories/:repository_id/scans
            variables:
              - repository_id: 999
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array").that.is.empty;;
                  pm.expect(responseJson["total"]).to.eql(0);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get scans for a repository with invalid ID
            method: GET
            request: resc/v1/repositories/:repository_id/scans
            variables:
              - repository_id: invalid
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
              });
          - name: Delete a repository which doesn't exist
            method: DELETE
            request: resc/v1/repositories/:repository_id
            variables:
              - repository_id: 999
            status_code: 404
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"]).to.eql("Repository not found");
              });
          - name: Delete a repository with invalid id
            method: DELETE
            request: resc/v1/repositories/:repository_id
            variables:
              - repository_id: one
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
              });
      - name: scans
        item:
          - name: Create a scan
            method: POST
            request: resc/v1/scans
            status_code: 201
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["id_"]).to.be.greaterThan(0);
                  pm.environment.set("scan_id", responseJson["id_"]);
                  pm.expect(responseJson["scan_type"]).to.eql("BASE");
                  pm.expect(responseJson["last_scanned_commit"]).to.eql("testcommit12345");
                  pm.expect(responseJson["timestamp"].substring(0, 10)).to.eql(pm.environment.get("currentdate").substring(0, 10));
                  pm.expect(responseJson["increment_number"]).to.eql(0);
                  pm.expect(responseJson["rule_pack"]).to.eql("1.0.0");
                  pm.expect(responseJson["repository_id"]).to.eql(pm.environment.get("repository_id"));
              });
            prerequest: |-
              const now = new Date().toISOString();
              pm.environment.set('currentdate', now);
            form_raw: |-
              {
                "scan_type": "BASE",
                "last_scanned_commit": "testcommit12345",
                "timestamp": "{{currentdate}}",
                "increment_number": 0,
                "rule_pack": "1.0.0",
                "repository_id": {{repository_id}}
              }
          - name: Create a scan with invalid body
            method: POST
            request: resc/v1/scans
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("enum");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be 'BASE' or 'INCREMENTAL'");
              
                  pm.expect(responseJson["detail"][1]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][1]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
              
                  pm.expect(responseJson["detail"][2]["type"]).to.eql("string_type");
                  pm.expect(responseJson["detail"][2]["msg"]).to.eql("Input should be a valid string");
              });
            form_raw: |-
              {
                "scan_type": "TEST",
                "last_scanned_commit": "testcommit12345",
                "timestamp": "2023-01-30T22:51:31.486Z",
                "increment_number": "one",
                "rule_pack": 1,
                "repository_id": "str"
              }
          - name: Fetch a scan by ID
            method: GET
            request: resc/v1/scans/:scan_id
            variables:
              - scan_id: "{{scan_id}}"
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["scan_type"]).to.eql("BASE");
                  pm.expect(responseJson["last_scanned_commit"]).to.eql("testcommit12345");
                  pm.expect(responseJson["timestamp"].substring(0, 10)).to.eql(pm.environment.get("currentdate").substring(0, 10));
                  pm.expect(responseJson["increment_number"]).to.eql(0);
                  pm.expect(responseJson["rule_pack"]).to.eql("1.0.0");
                  pm.expect(responseJson["repository_id"]).to.eql(pm.environment.get("repository_id"));
                  pm.expect(responseJson["id_"]).to.eql(pm.environment.get("scan_id"));
              });
          - name: Fetch a scan by non existent ID
            method: GET
            request: resc/v1/scans/:scan_id
            variables:
              - scan_id: 999
            status_code: 404
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"]).to.eql("Scan not found");
              });
          - name: Fetch a scan by invalid ID
            method: GET
            request: resc/v1/scans/:scan_id
            variables:
              - scan_id: invalid
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
              });
          - name: Get all scans
            method: GET
            request: resc/v1/scans?skip=0&limit=100
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array");
              
                  pm.expect(responseJson["data"][0]["scan_type"]).to.eql("BASE");
                  pm.expect(responseJson["data"][0]["last_scanned_commit"]).to.eql("qwerty1");
                  pm.expect(responseJson["data"][0]["timestamp"]).to.eql("2023-07-12T00:00:00");
                  pm.expect(responseJson["data"][0]["increment_number"]).to.eql(0);
                  pm.expect(responseJson["data"][0]["rule_pack"]).to.eql("0.0.0");
                  pm.expect(responseJson["data"][0]["repository_id"]).to.eql(1);
                  pm.expect(responseJson["data"][0]["id_"]).to.eql(1);
              
                  pm.expect(responseJson["data"][1]["scan_type"]).to.eql("INCREMENTAL");
                  pm.expect(responseJson["data"][1]["last_scanned_commit"]).to.eql("qwerty2");
                  pm.expect(responseJson["data"][1]["timestamp"]).to.eql("2023-07-13T00:00:00");
                  pm.expect(responseJson["data"][1]["increment_number"]).to.eql(1);
                  pm.expect(responseJson["data"][1]["rule_pack"]).to.eql("0.0.0");
                  pm.expect(responseJson["data"][1]["repository_id"]).to.eql(1);
                  pm.expect(responseJson["data"][1]["id_"]).to.eql(2);
              
                  pm.expect(responseJson["data"][2]["scan_type"]).to.eql("BASE");
                  pm.expect(responseJson["data"][2]["last_scanned_commit"]).to.eql("qwerty1");
                  pm.expect(responseJson["data"][2]["timestamp"]).to.eql("2023-07-14T00:00:00");
                  pm.expect(responseJson["data"][2]["increment_number"]).to.eql(0);
                  pm.expect(responseJson["data"][2]["rule_pack"]).to.eql("1.0.0");
                  pm.expect(responseJson["data"][2]["repository_id"]).to.eql(1);
                  pm.expect(responseJson["data"][2]["id_"]).to.eql(3);
              
                  pm.expect(responseJson["data"][3]["scan_type"]).to.eql("INCREMENTAL");
                  pm.expect(responseJson["data"][3]["last_scanned_commit"]).to.eql("qwerty2");
                  pm.expect(responseJson["data"][3]["timestamp"]).to.eql("2023-07-15T00:00:00");
                  pm.expect(responseJson["data"][3]["increment_number"]).to.eql(1);
                  pm.expect(responseJson["data"][3]["rule_pack"]).to.eql("1.0.0");
                  pm.expect(responseJson["data"][3]["repository_id"]).to.eql(1);
                  pm.expect(responseJson["data"][3]["id_"]).to.eql(4);
              
                  pm.expect(responseJson["data"][4]["scan_type"]).to.eql("BASE");
                  pm.expect(responseJson["data"][4]["last_scanned_commit"]).to.eql("qwerty3");
                  pm.expect(responseJson["data"][4]["timestamp"]).to.eql("2023-07-14T00:00:00");
                  pm.expect(responseJson["data"][4]["increment_number"]).to.eql(0);
                  pm.expect(responseJson["data"][4]["rule_pack"]).to.eql("1.0.0");
                  pm.expect(responseJson["data"][4]["repository_id"]).to.eql(2);
                  pm.expect(responseJson["data"][4]["id_"]).to.eql(5);
              
                  pm.expect(responseJson["data"][5]["scan_type"]).to.eql("INCREMENTAL");
                  pm.expect(responseJson["data"][5]["last_scanned_commit"]).to.eql("qwerty4");
                  pm.expect(responseJson["data"][5]["timestamp"]).to.eql("2023-07-15T00:00:00");
                  pm.expect(responseJson["data"][5]["increment_number"]).to.eql(1);
                  pm.expect(responseJson["data"][5]["rule_pack"]).to.eql("1.0.0");
                  pm.expect(responseJson["data"][5]["repository_id"]).to.eql(2);
                  pm.expect(responseJson["data"][5]["id_"]).to.eql(6);
              
                  pm.expect(responseJson["data"][6]["scan_type"]).to.eql("BASE");
                  pm.expect(responseJson["data"][6]["last_scanned_commit"]).to.eql("testcommit12345");
                  pm.expect(responseJson["data"][6]["timestamp"].substring(0, 10)).to.eql(pm.environment.get("currentdate").substring(0, 10));
                  pm.expect(responseJson["data"][6]["increment_number"]).to.eql(0);
                  pm.expect(responseJson["data"][6]["rule_pack"]).to.eql("1.0.0");
                  pm.expect(responseJson["data"][6]["repository_id"]).to.eql(pm.environment.get("repository_id"));
                  pm.expect(responseJson["data"][6]["id_"]).to.eql(pm.environment.get("scan_id"));
              
                  pm.expect(responseJson["total"]).to.eql(7);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get all scans with invalid parameter
            method: GET
            request: resc/v1/scans?skip=invalid&limit=invalid
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
              
                  pm.expect(responseJson["detail"][1]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][1]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
              });
          - name: Update a scan
            method: PUT
            request: resc/v1/scans/:scan_id
            variables:
              - scan_id: "{{scan_id}}"
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["id_"]).to.be.greaterThan(0);
                  pm.environment.set("scan_id", responseJson["id_"]);
                  pm.expect(responseJson["scan_type"]).to.eql("BASE");
                  pm.expect(responseJson["last_scanned_commit"]).to.eql("testcommit12345");
                  pm.expect(responseJson["timestamp"].substring(0, 10)).to.eql(pm.environment.get("currentdate").substring(0, 10));
                  pm.expect(responseJson["increment_number"]).to.eql(0);
                  pm.expect(responseJson["rule_pack"]).to.eql("1.0.0");
                  pm.expect(responseJson["repository_id"]).to.eql(pm.environment.get("repository_id"));
              });
            form_raw: |-
              {
                "scan_type": "BASE",
                "last_scanned_commit": "testcommit12345",
                "timestamp": "{{currentdate}}",
                "increment_number": 0,
                "rule_pack": "1.0.0",
                "repository_id": {{repository_id}}
              }
          - name: Update a scan with non existent ID
            method: PUT
            request: resc/v1/scans/:scan_id
            variables:
              - scan_id: 999
            status_code: 404
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"]).to.eql("Scan not found");
              });
            form_raw: |-
              {
                "scan_type": "BASE",
                "last_scanned_commit": "testcommit12345",
                "timestamp": "2023-01-30T22:51:31.486Z",
                "increment_number": 0,
                "rule_pack": "1.0.0",
                "repository_id": {{repository_id}}
              }
          - name: Update a scan with invalid body
            method: PUT
            request: resc/v1/scans/:scan_id
            variables:
              - scan_id: 999
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("enum");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be 'BASE' or 'INCREMENTAL'");
              
                  pm.expect(responseJson["detail"][1]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][1]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
              
                  pm.expect(responseJson["detail"][2]["type"]).to.eql("string_type");
                  pm.expect(responseJson["detail"][2]["msg"]).to.eql("Input should be a valid string");
              });
            form_raw: |-
              {
                "scan_type": "TEST",
                "last_scanned_commit": "testcommit12345",
                "timestamp": "2023-01-30T22:51:31.486Z",
                "increment_number": "one",
                "rule_pack": 1,
                "repository_id": "str"
              }
          - name: Get scan findings associated with a scan ID
            method: GET
            request: resc/v1/scans/:scan_id/findings?skip=0&limit=100
            variables:
              - scan_id: "{{scan_id}}"
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array");
                  pm.expect(responseJson["data"].length).to.eql(0);
                  pm.expect(responseJson["total"]).to.eql(0);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get scan findings associated with a non existent scan ID
            method: GET
            request: resc/v1/scans/:scan_id/findings?skip=0&limit=100
            variables:
              - scan_id: 999
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array").that.is.empty;;
                  pm.expect(responseJson["total"]).to.eql(0);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get scan findings associated with an invalid scan id
            method: GET
            request: resc/v1/scans/:scan_id/findings?skip=0&limit=100
            variables:
              - scan_id: invalid
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
              });
          - name: Get scan findings associated with a scan ID with rule filter
            method: GET
            request: resc/v1/scans/:scan_id/findings?skip=0&limit=100&rule=rule1
            variables:
              - scan_id: "{{scan_id}}"
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array");
                  pm.expect(responseJson["data"].length).to.eql(0);
                  pm.expect(responseJson["total"]).to.eql(0);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get scan findings associated with a scan ID with non existent rule filter
            method: GET
            request: resc/v1/scans/:scan_id/findings?skip=0&limit=100&rule=notexistent
            variables:
              - scan_id: "{{scan_id}}"
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array").that.is.empty;
                  pm.expect(responseJson["total"]).to.eql(0);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get scan findings associated with a scan ID with status filter
            method: GET
            request: resc/v1/scans/:scan_id/findings?skip=0&limit=100&status=NOT_ANALYZED
            variables:
              - scan_id: "{{scan_id}}"
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array");
                  pm.expect(responseJson["data"].length).to.eql(0);
                  pm.expect(responseJson["total"]).to.eql(0);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get scan findings associated with a scan ID with rule and status filter
            method: GET
            request: resc/v1/scans/:scan_id/findings?skip=0&limit=100&rule=rule1&status=NOT_ANALYZED
            variables:
              - scan_id: "{{scan_id}}"
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array");
                  pm.expect(responseJson["data"].length).to.eql(0);
                  pm.expect(responseJson["total"]).to.eql(0);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Create scan findings
            method: POST
            request: resc/v1/scans/:scan_id/findings
            variables:
              - scan_id: "{{scan_id}}"
            status_code: 201
            response_time: 300
            form_raw: |-
              [
                {
                  "file_path": "dummy_file.txt",
                  "line_number": 10,
                  "column_start": 1,
                  "column_end": 8,
                  "commit_id": "testcommit12345",
                  "commit_message": "test commit message",
                  "commit_timestamp": "2023-01-30T23:18:24.546Z",
                  "author": "test-author",
                  "email": "test-author@mail.com",
                  "status": "NOT_ANALYZED",
                  "comment": "",
                  "event_sent_on": null,
                  "rule_name": "private-key",
                  "repository_id": {{repository_id}}
                }
              
              ]
          - name: Create scan findings with invalid body
            method: POST
            request: resc/v1/scans/:scan_id/findings
            variables:
              - scan_id: "{{scan_id}}"
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
              
              });
            form_raw: |-
              [
                {
                  "file_path": "dummy_file.txt",
                  "line_number": 10,
                  "column_start": 1,
                  "column_end": 8,
                  "commit_id": "testcommit12345",
                  "commit_message": "test commit message",
                  "commit_timestamp": "2023-01-30T23:18:24.546Z",
                  "author": "test-author",
                  "email": "test-author@mail.com",
                  "event_sent_on": null,
                  "rule_name": "private-key",
                  "repository_id": "str"
                }
              
              ]
          - name: Get scan findings
            method: GET
            request: resc/v1/scans/findings/?scan_id={{scan_id}}&skip=0&limit=100
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array");
                  pm.expect(responseJson["data"][0]["file_path"]).to.eql("dummy_file.txt");
                  pm.expect(responseJson["data"][0]["line_number"]).to.eql(10);
                  pm.expect(responseJson["data"][0]["column_start"]).to.eql(1);
                  pm.expect(responseJson["data"][0]["column_end"]).to.eql(8);
                  pm.expect(responseJson["data"][0]["commit_id"]).to.eql("testcommit12345");
                  pm.expect(responseJson["data"][0]["commit_message"]).to.eql("test commit message");
                  pm.expect(responseJson["data"][0]["commit_timestamp"]).to.eql("2023-01-30T23:18:24.547000");
                  pm.expect(responseJson["data"][0]["author"]).to.eql("test-author");
                  pm.expect(responseJson["data"][0]["email"]).to.eql("test-author@mail.com");
                  pm.expect(responseJson["data"][0]["event_sent_on"]).to.eql(null);
                  pm.expect(responseJson["data"][0]["rule_name"]).to.eql("private-key");
                  pm.expect(responseJson["data"][0]["repository_id"]).to.eql(pm.environment.get("repository_id"));
                  pm.expect(responseJson["data"][0]["id_"]).to.be.greaterThan(0);
                  pm.expect(responseJson["data"][0]["scan_ids"]).to.eql(null);
              });
          - name: Get scan findings with non existent scan id
            method: GET
            request: resc/v1/scans/findings/?scan_id=999&skip=0&limit=100
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array").that.is.empty;;
                  pm.expect(responseJson["total"]).to.eql(0);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
                  
              });
          - name: Get scan findings with invalid scan id
            method: GET
            request: resc/v1/scans/findings/?scan_id=invalid&skip=0&limit=100
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
              });
          - name: Get scan findings with rule filter
            method: GET
            request: resc/v1/scans/findings/?scan_id={{scan_id}}&skip=0&limit=100&rule=private-key
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array");
                  pm.expect(responseJson["data"][0]["file_path"]).to.eql("dummy_file.txt");
                  pm.expect(responseJson["data"][0]["line_number"]).to.eql(10);
                  pm.expect(responseJson["data"][0]["column_start"]).to.eql(1);
                  pm.expect(responseJson["data"][0]["column_end"]).to.eql(8);
                  pm.expect(responseJson["data"][0]["commit_id"]).to.eql("testcommit12345");
                  pm.expect(responseJson["data"][0]["commit_message"]).to.eql("test commit message");
                  pm.expect(responseJson["data"][0]["commit_timestamp"]).to.eql("2023-01-30T23:18:24.547000");
                  pm.expect(responseJson["data"][0]["author"]).to.eql("test-author");
                  pm.expect(responseJson["data"][0]["email"]).to.eql("test-author@mail.com");
                  pm.expect(responseJson["data"][0]["event_sent_on"]).to.eql(null);
                  pm.expect(responseJson["data"][0]["rule_name"]).to.eql("private-key");
                  pm.expect(responseJson["data"][0]["repository_id"]).to.eql(pm.environment.get("repository_id"));
                  pm.expect(responseJson["data"][0]["id_"]).to.be.greaterThan(0);
                  pm.expect(responseJson["data"][0]["scan_ids"]).to.eql(null);
              });
          - name: Get scan findings with rule filter with non existent scan id
            method: GET
            request: resc/v1/scans/findings/?scan_id=999&skip=0&limit=100&rule=private-key
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array").that.is.empty;;
                  pm.expect(responseJson["total"]).to.eql(0);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get scan findings with rule filter with non existent rule
            method: GET
            request: resc/v1/scans/findings/?scan_id={{scan_id}}&skip=0&limit=100&rule=notexists
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array").that.is.empty;;
                  pm.expect(responseJson["total"]).to.eql(0);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get scan findings with status filter
            method: GET
            request: resc/v1/scans/findings/?scan_id={{scan_id}}&skip=0&limit=100&status=NOT_ANALYZED
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array");
                  pm.expect(responseJson["data"][0]["file_path"]).to.eql("dummy_file.txt");
                  pm.expect(responseJson["data"][0]["line_number"]).to.eql(10);
                  pm.expect(responseJson["data"][0]["column_start"]).to.eql(1);
                  pm.expect(responseJson["data"][0]["column_end"]).to.eql(8);
                  pm.expect(responseJson["data"][0]["commit_id"]).to.eql("testcommit12345");
                  pm.expect(responseJson["data"][0]["commit_message"]).to.eql("test commit message");
                  pm.expect(responseJson["data"][0]["commit_timestamp"]).to.eql("2023-01-30T23:18:24.547000");
                  pm.expect(responseJson["data"][0]["author"]).to.eql("test-author");
                  pm.expect(responseJson["data"][0]["email"]).to.eql("test-author@mail.com");
                  pm.expect(responseJson["data"][0]["event_sent_on"]).to.eql(null);
                  pm.expect(responseJson["data"][0]["rule_name"]).to.eql("private-key");
                  pm.expect(responseJson["data"][0]["repository_id"]).to.eql(pm.environment.get("repository_id"));
                  pm.expect(responseJson["data"][0]["id_"]).to.be.greaterThan(0);
                  pm.expect(responseJson["data"][0]["scan_ids"]).to.eql(null);
              });
          - name: Get scan findings with invalid status filter
            method: GET
            request: resc/v1/scans/findings/?scan_id={{scan_id}}&skip=0&limit=100&status=invalid
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("enum");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be 'NOT_ANALYZED', 'NOT_ACCESSIBLE', 'CLARIFICATION_REQUIRED', 'FALSE_POSITIVE', 'TRUE_POSITIVE' or 'OUTDATED'");
              });
          - name: Get scan findings with rule and status filter
            method: GET
            request: resc/v1/scans/findings/?scan_id={{scan_id}}&skip=0&limit=100&rule=private-key&status=NOT_ANALYZED
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array");
                  pm.expect(responseJson["data"][0]["file_path"]).to.eql("dummy_file.txt");
                  pm.expect(responseJson["data"][0]["line_number"]).to.eql(10);
                  pm.expect(responseJson["data"][0]["column_start"]).to.eql(1);
                  pm.expect(responseJson["data"][0]["column_end"]).to.eql(8);
                  pm.expect(responseJson["data"][0]["commit_id"]).to.eql("testcommit12345");
                  pm.expect(responseJson["data"][0]["commit_message"]).to.eql("test commit message");
                  pm.expect(responseJson["data"][0]["commit_timestamp"]).to.eql("2023-01-30T23:18:24.547000");
                  pm.expect(responseJson["data"][0]["author"]).to.eql("test-author");
                  pm.expect(responseJson["data"][0]["email"]).to.eql("test-author@mail.com");
                  pm.expect(responseJson["data"][0]["event_sent_on"]).to.eql(null);
                  pm.expect(responseJson["data"][0]["rule_name"]).to.eql("private-key");
                  pm.expect(responseJson["data"][0]["id_"]).to.be.greaterThan(0);
                  pm.expect(responseJson["data"][0]["scan_ids"]).to.eql(null);
              });
          - name: Get scan findings with invalid rule and status filter
            method: GET
            request: resc/v1/scans/findings/?scan_id={{scan_id}}&skip=0&limit=100&rule=invalid&status=invalis
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("enum");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be 'NOT_ANALYZED', 'NOT_ACCESSIBLE', 'CLARIFICATION_REQUIRED', 'FALSE_POSITIVE', 'TRUE_POSITIVE' or 'OUTDATED'");
              });
          - name: Get unique rules from scans
            method: GET
            request: resc/v1/scans/detected-rules/?scan_id={{scan_id}}
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array");
                  pm.expect(responseJson.length).to.eql(1);
                  pm.expect(responseJson).to.eql(["private-key"] );
                  pm.expect(responseJson).to.include("private-key");
              });
          - name: Get unique rules from scans where scan id doesn't exist
            method: GET
            request: resc/v1/scans/detected-rules/?scan_id=999
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array");
                  pm.expect(responseJson.length).to.eql(0);
              });
          - name: Get unique rules from scans for invalid scan id
            method: GET
            request: resc/v1/scans/detected-rules/?scan_id=invalid
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
              });
          - name: Get latest scan for a repository
            method: GET
            request: resc/v1/repositories/:repository_id/last-scan
            variables:
              - repository_id: "{{repository_id}}"
            status_code: 200
            response_time: 300
          - name: Delete a scan which doesn't exist
            method: DELETE
            request: resc/v1/scans/:scan_id
            variables:
              - scan_id: 999
            status_code: 404
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"]).to.eql("Scan not found");
              });
          - name: Delete a scan with invalid id
            method: DELETE
            request: resc/v1/scans/:scan_id
            variables:
              - scan_id: one
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
              });
      - name: findings
        item:
          - name: Create finding
            method: POST
            request: resc/v1/findings
            status_code: 201
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.response.to.have.body("1");
                  pm.expect(pm.response.text()).to.include("1");
              });
            form_raw: |-
              [
                 {
                  "file_path": "dummy_file.txt",
                  "line_number": 10,
                  "column_start": 1,
                  "column_end": 8,
                  "commit_id": "testcommit12345",
                  "commit_message": "test commit message",
                  "commit_timestamp": "2023-01-30T23:18:24.546Z",
                  "author": "test-author",
                  "email": "test-author@mail.com",
                  "event_sent_on": null,
                  "rule_name": "GitHub Personal Access Token",
                  "repository_id": {{repository_id}}
                }
              ]
          - name: Create finding with invalid body
            method: POST
            request: resc/v1/findings
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
              });
            form_raw: |-
              [
                 {
                  "file_path": "dummy_file.txt",
                  "line_number": 10,
                  "column_start": 1,
                  "column_end": 8,
                  "commit_id": "testcommit12345",
                  "commit_message": "test commit message",
                  "commit_timestamp": "2023-01-30T23:18:24.546Z",
                  "author": "test-author",
                  "email": "test-author@mail.com",
                  "event_sent_on": null,
                  "rule_name": "GitHub Personal Access Token",
                  "repository_id": "str"
                }
              ]
          - name: Get all findings
            method: GET
            request: resc/v1/findings?skip=0&limit=100
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
              
                  pm.expect(responseJson["data"]).to.be.an("array");
                  pm.expect(responseJson["data"].length).to.eql(8);
                  
                  pm.expect(responseJson["data"][0]["file_path"]).to.eql("application.txt");
                  pm.expect(responseJson["data"][0]["line_number"]).to.eql(1);
                  pm.expect(responseJson["data"][0]["column_start"]).to.eql(1);
                  pm.expect(responseJson["data"][0]["column_end"]).to.eql(100);
                  pm.expect(responseJson["data"][0]["commit_id"]).to.eql("qwerty1");
                  pm.expect(responseJson["data"][0]["commit_message"]).to.eql("this is commit 1");
                  pm.expect(responseJson["data"][0]["commit_timestamp"]).to.include("2023-01-01T00:00:00");
                  pm.expect(responseJson["data"][0]["author"]).to.eql("developer");
                  pm.expect(responseJson["data"][0]["email"]).to.eql("developer@abc.com");
                  pm.expect(responseJson["data"][0]["event_sent_on"]).to.eql(null);
                  pm.expect(responseJson["data"][0]["rule_name"]).to.eql("github-oauth");
                  pm.expect(responseJson["data"][0]["repository_id"]).to.eql(1);
                  pm.expect(responseJson["data"][0]["scan_ids"]).to.eql(null);
                  pm.expect(responseJson["data"][0]["id_"]).to.be.eql(1);
                  pm.environment.set("finding_id", responseJson["data"][0]["id_"]);
              
              
                  pm.expect(responseJson["data"]).to.be.an("array");
                  pm.expect(responseJson["data"][1]["file_path"]).to.eql("application.txt");
                  pm.expect(responseJson["data"][1]["line_number"]).to.eql(2);
                  pm.expect(responseJson["data"][1]["column_start"]).to.eql(1);
                  pm.expect(responseJson["data"][1]["column_end"]).to.eql(80);
                  pm.expect(responseJson["data"][1]["commit_id"]).to.eql("qwerty2");
                  pm.expect(responseJson["data"][1]["commit_message"]).to.eql("this is commit 2");
                  pm.expect(responseJson["data"][1]["commit_timestamp"]).to.include("2023-01-02T00:00:00");
                  pm.expect(responseJson["data"][1]["author"]).to.eql("developer");
                  pm.expect(responseJson["data"][1]["email"]).to.eql("developer@abc.com");
                  pm.expect(responseJson["data"][1]["event_sent_on"]).to.eql(null);
                  pm.expect(responseJson["data"][1]["rule_name"]).to.eql("github-pat");
                  pm.expect(responseJson["data"][1]["repository_id"]).to.eql(1);
                  pm.expect(responseJson["data"][1]["scan_ids"]).to.eql(null);
                  pm.expect(responseJson["data"][1]["id_"]).to.be.eql(2);
                  pm.environment.set("finding_id", responseJson["data"][1]["id_"]);
              
              
                  pm.expect(responseJson["data"]).to.be.an("array");
                  pm.expect(responseJson["data"][7]["file_path"]).to.eql("dummy_file.txt");
                  pm.expect(responseJson["data"][7]["line_number"]).to.eql(10);
                  pm.expect(responseJson["data"][7]["column_start"]).to.eql(1);
                  pm.expect(responseJson["data"][7]["column_end"]).to.eql(8);
                  pm.expect(responseJson["data"][7]["commit_id"]).to.eql("testcommit12345");
                  pm.expect(responseJson["data"][7]["commit_message"]).to.eql("test commit message");
                  pm.expect(responseJson["data"][7]["commit_timestamp"]).to.include("2023-01-30T23");
                  pm.expect(responseJson["data"][7]["author"]).to.eql("test-author");
                  pm.expect(responseJson["data"][7]["email"]).to.eql("test-author@mail.com");
                  pm.expect(responseJson["data"][7]["event_sent_on"]).to.eql(null);
                  pm.expect(responseJson["data"][7]["rule_name"]).to.eql("GitHub Personal Access Token");
                  pm.expect(responseJson["data"][7]["repository_id"]).to.eql(pm.environment.get("repository_id"));
                  pm.expect(responseJson["data"][7]["scan_ids"]).to.eql(null);
                  pm.expect(responseJson["data"][7]["id_"]).to.be.greaterThan(0);
                  pm.environment.set("finding_id", responseJson["data"][7]["id_"]);
              
                  pm.expect(responseJson["total"]).to.eql(8);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get all detailed findings by rule pack version 0.0.0
            method: GET
            request: resc/v1/detailed-findings?skip=0&limit=100&query_string=rule_pack_versions%3D%5B%220.0.0%22%5D
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array");
                  pm.expect(responseJson["data"].length).to.eql(1);
              
                  pm.expect(responseJson["data"][0]["file_path"]).to.eql("application.txt");
                  pm.expect(responseJson["data"][0]["line_number"]).to.eql(1);
                  pm.expect(responseJson["data"][0]["column_start"]).to.eql(1);
                  pm.expect(responseJson["data"][0]["column_end"]).to.eql(100);
                  pm.expect(responseJson["data"][0]["commit_id"]).to.eql("qwerty1");
                  pm.expect(responseJson["data"][0]["commit_message"]).to.eql("this is commit 1");
                  pm.expect(responseJson["data"][0]["commit_timestamp"]).to.include("2023-01-01T00:00:00");
                  pm.expect(responseJson["data"][0]["author"]).to.eql("developer");
                  pm.expect(responseJson["data"][0]["email"]).to.eql("developer@abc.com");
                  pm.expect(responseJson["data"][0]["status"]).to.eql("TRUE_POSITIVE");
                  pm.expect(responseJson["data"][0]["comment"]).to.eql("It is a true positive issue");
                  pm.expect(responseJson["data"][0]["event_sent_on"]).to.eql(null);
                  pm.expect(responseJson["data"][0]["project_key"]).to.eql("ado-project1");
                  pm.expect(responseJson["data"][0]["repository_name"]).to.eql("resc-dummy1");
                  pm.expect(responseJson["data"][0]["repository_url"]).to.eql("https://fake-dev.azure.com/ado-org/ado-project1/_git/resc-dummy1");
                  pm.expect(responseJson["data"][0]["timestamp"]).to.eql("2023-07-12T00:00:00");
                  pm.expect(responseJson["data"][0]["vcs_provider"]).to.eql("AZURE_DEVOPS");
                  pm.expect(responseJson["data"][0]["last_scanned_commit"]).to.eql("qwerty1");
                  pm.expect(responseJson["data"][0]["commit_url"]).to.eql("https://fake-dev.azure.com/ado-org/ado-project1/_git/resc-dummy1/commit/qwerty1?path=/application.txt&line=1&lineEnd=2&lineStartColumn=1&lineEndColumn=1&type=2&lineStyle=plain");
                  pm.expect(responseJson["data"][0]["rule_name"]).to.eql("github-oauth");
                  pm.expect(responseJson["data"][0]["rule_pack"]).to.eql("0.0.0");
                  pm.expect(responseJson["data"][0]["scan_id"]).to.eql(1);
                  pm.expect(responseJson["data"][0]["id_"]).to.eql(1);
              
                  pm.expect(responseJson["total"]).to.eql(1);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get all detailed findings by rule pack version 1.0.0
            method: GET
            request: resc/v1/detailed-findings?skip=0&limit=100&query_string=rule_pack_versions%3D%5B%221.0.0%22%5D
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array");
                  pm.expect(responseJson["data"].length).to.eql(7);
              
                  pm.expect(responseJson["data"][0]["file_path"]).to.eql("application.txt");
                  pm.expect(responseJson["data"][0]["line_number"]).to.eql(1);
                  pm.expect(responseJson["data"][0]["column_start"]).to.eql(1);
                  pm.expect(responseJson["data"][0]["column_end"]).to.eql(100);
                  pm.expect(responseJson["data"][0]["commit_id"]).to.eql("qwerty1");
                  pm.expect(responseJson["data"][0]["commit_message"]).to.eql("this is commit 1");
                  pm.expect(responseJson["data"][0]["commit_timestamp"]).to.include("2023-01-01T00:00:00");
                  pm.expect(responseJson["data"][0]["author"]).to.eql("developer");
                  pm.expect(responseJson["data"][0]["email"]).to.eql("developer@abc.com");
                  pm.expect(responseJson["data"][0]["status"]).to.eql("TRUE_POSITIVE");
                  pm.expect(responseJson["data"][0]["comment"]).to.eql("It is a true positive issue");
                  pm.expect(responseJson["data"][0]["event_sent_on"]).to.eql(null);
                  pm.expect(responseJson["data"][0]["project_key"]).to.eql("ado-project1");
                  pm.expect(responseJson["data"][0]["repository_name"]).to.eql("resc-dummy1");
                  pm.expect(responseJson["data"][0]["repository_url"]).to.eql("https://fake-dev.azure.com/ado-org/ado-project1/_git/resc-dummy1");
                  pm.expect(responseJson["data"][0]["timestamp"]).to.eql("2023-07-14T00:00:00");
                  pm.expect(responseJson["data"][0]["vcs_provider"]).to.eql("AZURE_DEVOPS");
                  pm.expect(responseJson["data"][0]["last_scanned_commit"]).to.eql("qwerty1");
                  pm.expect(responseJson["data"][0]["commit_url"]).to.eql("https://fake-dev.azure.com/ado-org/ado-project1/_git/resc-dummy1/commit/qwerty1?path=/application.txt&line=1&lineEnd=2&lineStartColumn=1&lineEndColumn=1&type=2&lineStyle=plain");
                  pm.expect(responseJson["data"][0]["rule_name"]).to.eql("github-oauth");
                  pm.expect(responseJson["data"][0]["rule_pack"]).to.eql("1.0.0");
                  pm.expect(responseJson["data"][0]["scan_id"]).to.eql(3);
                  pm.expect(responseJson["data"][0]["id_"]).to.eql(1);
              
                  pm.expect(responseJson["data"][6]["file_path"]).to.eql("dummy_file.txt");
                  pm.expect(responseJson["data"][6]["line_number"]).to.eql(10);
                  pm.expect(responseJson["data"][6]["column_start"]).to.eql(1);
                  pm.expect(responseJson["data"][6]["column_end"]).to.eql(8);
                  pm.expect(responseJson["data"][6]["commit_id"]).to.eql("testcommit12345");
                  pm.expect(responseJson["data"][6]["commit_message"]).to.eql("test commit message");
                  pm.expect(responseJson["data"][6]["commit_timestamp"]).to.include("2023-01-30T23");
                  pm.expect(responseJson["data"][6]["author"]).to.eql("test-author");
                  pm.expect(responseJson["data"][6]["email"]).to.eql("test-author@mail.com");
                  pm.expect(responseJson["data"][6]["status"]).to.eql("NOT_ANALYZED");
                  pm.expect(responseJson["data"][6]["comment"]).to.eql("");
                  pm.expect(responseJson["data"][6]["event_sent_on"]).to.eql(null);
                  pm.expect(responseJson["data"][6]["project_key"]).to.eql("test-project");
                  pm.expect(responseJson["data"][6]["repository_name"]).to.eql("test-repository");
                  pm.expect(responseJson["data"][6]["repository_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository");
                  pm.expect(responseJson["data"][6]["vcs_provider"]).to.eql("AZURE_DEVOPS");
                  pm.expect(responseJson["data"][6]["last_scanned_commit"]).to.eql("testcommit12345");
                  pm.expect(responseJson["data"][6]["commit_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository/commit/testcommit12345?path=/dummy_file.txt&line=10&lineEnd=11&lineStartColumn=1&lineEndColumn=1&type=2&lineStyle=plain");
                  pm.expect(responseJson["data"][6]["rule_name"]).to.eql("private-key");
                  pm.expect(responseJson["data"][6]["rule_pack"]).to.eql("1.0.0");
              
                  pm.expect(responseJson["total"]).to.eql(7);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get all findings with invalid parameter
            method: GET
            request: resc/v1/findings?skip=invalid&limit=invalid
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
              
                  pm.expect(responseJson["detail"][1]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][1]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
              });
          - name: Fetch a finding by ID
            method: GET
            request: resc/v1/findings/:finding_id
            variables:
              - finding_id: "{{finding_id}}"
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["file_path"]).to.eql("dummy_file.txt");
                  pm.expect(responseJson["line_number"]).to.eql(10);
                  pm.expect(responseJson["column_start"]).to.eql(1);
                  pm.expect(responseJson["column_end"]).to.eql(8);
                  pm.expect(responseJson["commit_id"]).to.eql("testcommit12345");
                  pm.expect(responseJson["commit_message"]).to.eql("test commit message");
                  pm.expect(responseJson["email"]).to.eql("test-author@mail.com");
                  pm.expect(responseJson["event_sent_on"]).to.eql(null);
                  pm.expect(responseJson["rule_name"]).to.eql("GitHub Personal Access Token");
                  pm.expect(responseJson["repository_id"]).to.eql(pm.environment.get("repository_id"));
                  pm.expect(responseJson["id_"]).to.eql(pm.environment.get("finding_id"));
                  pm.expect(responseJson["scan_ids"]).to.be.an("array");
              });
          - name: Fetch a finding by invalid ID
            method: GET
            request: resc/v1/findings/:finding_id
            variables:
              - finding_id: invalid
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
              });
          - name: Fetch a finding by non existent ID
            method: GET
            request: resc/v1/findings/:finding_id
            variables:
              - finding_id: 999
            status_code: 404
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"]).to.eql("Finding not found");
              });
          - name: Get findings by rule
            method: GET
            request: resc/v1/findings/by-rule/GitHub%20Personal%20Access%20Token?skip=0&limit=100
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array");
                  pm.expect(responseJson["data"].length).to.eql(1);
                  pm.expect(responseJson["data"][0]["file_path"]).to.eql("dummy_file.txt");
                  pm.expect(responseJson["data"][0]["line_number"]).to.eql(10);
                  pm.expect(responseJson["data"][0]["column_start"]).to.eql(1);
                  pm.expect(responseJson["data"][0]["column_end"]).to.eql(8);
                  pm.expect(responseJson["data"][0]["commit_id"]).to.eql("testcommit12345");
                  pm.expect(responseJson["data"][0]["commit_message"]).to.eql("test commit message");
                  pm.expect(responseJson["data"][0]["email"]).to.eql("test-author@mail.com");
                  pm.expect(responseJson["data"][0]["event_sent_on"]).to.eql(null);
                  pm.expect(responseJson["data"][0]["rule_name"]).to.eql("GitHub Personal Access Token");
                  pm.expect(responseJson["data"][0]["repository_id"]).to.eql(pm.environment.get("repository_id"));
                  pm.expect(responseJson["data"][0]["id_"]).to.eql(pm.environment.get("finding_id"));
                  pm.expect(responseJson["data"][0]["scan_ids"]).to.eql(null);
                  pm.expect(responseJson["total"]).to.eql(1);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get findings by rule with invalid parameters
            method: GET
            request: resc/v1/findings/by-rule/GitHub%20Personal%20Access%20Token?skip=invalid&limit=invalid
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
              });
          - name: Get findings by rule with non existent rule name
            method: GET
            request: resc/v1/findings/by-rule/notexists?skip=0&limit=100
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array").that.is.empty;;
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get total findings count by rule
            method: GET
            request: resc/v1/findings/total-count-by-rule/GitHub%20Personal%20Access%20Token
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(pm.response.text()).to.include(1);
              });
          - name: Get total findings count by rule with non existent rule name
            method: GET
            request: resc/v1/findings/total-count-by-rule/notexists
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(pm.response.text()).to.include(0);
              });
          - name: Get all supported statuses for findings
            method: GET
            request: resc/v1/findings/supported-statuses/
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array");
                  pm.expect(responseJson.length).to.eql(6);
                  pm.expect(responseJson).to.eql([ "NOT_ANALYZED", "NOT_ACCESSIBLE", "CLARIFICATION_REQUIRED", "FALSE_POSITIVE", "TRUE_POSITIVE", "OUTDATED" ] );
                  pm.expect(responseJson).to.include("NOT_ANALYZED");
                  pm.expect(responseJson).to.include("NOT_ACCESSIBLE");
                  pm.expect(responseJson).to.include("CLARIFICATION_REQUIRED");
                  pm.expect(responseJson).to.include("FALSE_POSITIVE");
                  pm.expect(responseJson).to.include("TRUE_POSITIVE");
                  pm.expect(responseJson).to.include("OUTDATED");
              });
          - name: Get all the findings by time period - month
            method: GET
            request: resc/v1/findings/count-by-time/month?skip=0&limit=100
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array");
                  responseJson["data"].forEach((obj) => {
                      pm.expect(obj).to.have.property('date_lable');
                      pm.expect(obj).to.have.property('finding_count');
                  });
                  pm.expect(responseJson).to.have.property("total");
                  pm.expect(responseJson).to.have.property("limit");
                  pm.expect(responseJson).to.have.property("skip");
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
                  
              });
          - name: Get all the findings by time period - month with invalid paramters
            method: GET
            request: resc/v1/findings/count-by-time/month?skip=invalid&limit=invalid
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
                  pm.expect(responseJson["detail"][1]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][1]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
              });
          - name: Get all the findings by time period - week
            method: GET
            request: resc/v1/findings/count-by-time/week?skip=0&limit=100
            status_code: 200
            response_time: 300
            tests: |-
              currentDate = new Date();
              var newYear = new Date(currentDate.getFullYear(),0,1);
              var day = newYear.getDay() - 1;
              day = (day >= 0 ? day : day + 7);
              var daynum = Math.floor((currentDate.getTime() - newYear.getTime() - (currentDate.getTimezoneOffset()-newYear.getTimezoneOffset())*60000)/86400000) + 1;
              var weekNumber;
              if(day < 4) {
              weekNumber = Math.floor((daynum+day-1)/7) + 1;
              if(weekNumber > 52) {
              nYear = new Date(currentDate.getFullYear() + 1,0,1);
              nday = nYear.getDay() - dowOffset;
              nday = nday >= 0 ? nday : nday + 7;
              weekNumber = nday < 4 ? 1 : 53;
              }
              }
              else {
              weekNumber = Math.floor((daynum+day-1)/7);
              }
              
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array");
                  pm.expect(responseJson["data"].length).to.eql(2);
                  pm.expect(responseJson["data"][0]["finding_count"]).to.eql(6);
                  pm.expect(responseJson["data"][1]["date_lable"]).to.include("W"+weekNumber);
                  pm.expect(responseJson["data"][1]["finding_count"]).to.eql(1);
              
                  pm.expect(responseJson["total"]).to.eql(2);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
                  
              });
          - name: Get all the findings by time period - week with invalid parameters
            method: GET
            request: resc/v1/findings/count-by-time/week?skip=invalid&limit=invalid
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
                  pm.expect(responseJson["detail"][1]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][1]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
              });
          - name: Get all the findings by time period - day
            method: GET
            request: resc/v1/findings/count-by-time/day?skip=0&limit=100
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array");
                  pm.expect(responseJson["data"].length).to.eql(4);
                  pm.expect(responseJson["data"][0]["date_lable"]).to.include("2023-7-12");
                  pm.expect(responseJson["data"][0]["finding_count"]).to.eql(1);
                  pm.expect(responseJson["data"][1]["date_lable"]).to.include("2023-7-14");
                  pm.expect(responseJson["data"][1]["finding_count"]).to.eql(4);
                  pm.expect(responseJson["data"][2]["date_lable"]).to.include("2023-7-15");
                  pm.expect(responseJson["data"][2]["finding_count"]).to.eql(2);
                  pm.expect(responseJson["data"][3]["date_lable"]).to.include(pm.environment.get("currentdate").substring(0, 3));
                  pm.expect(responseJson["data"][3]["finding_count"]).to.eql(1);
                  pm.expect(responseJson["total"]).to.eql(4);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
                  
              });
          - name: Get all the findings by time period - day with invalid parameters
            method: GET
            request: resc/v1/findings/count-by-time/day?skip=invalid&limit=invalid
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
                  pm.expect(responseJson["detail"][1]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][1]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
              });
          - name: Audit single/multiple findings
            method: POST
            request: resc/v1/findings/audit/
            status_code: 201
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.response.to.have.body("1");
                  pm.expect(pm.response.text()).to.include("1");
              });
            form_raw: |-
              {
                "finding_ids": [
                  {{finding_id}}
                ],
                "status": "NOT_ANALYZED",
                "comment": "Audited"
              }
          - name: Audit single/multiple findings with non existent finding id
            method: POST
            request: resc/v1/findings/audit/
            status_code: 404
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"]).to.eql("Some findings where not found.");
              });
            form_raw: |-
              {
                "finding_ids": [
                  999
                ],
                "status": "NOT_ANALYZED",
                "comment": "Audited"
              }
          - name: Audit single/multiple findings with invalid body
            method: POST
            request: resc/v1/findings/audit/
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
                  pm.expect(responseJson["detail"][1]["type"]).to.eql("enum");
                  pm.expect(responseJson["detail"][1]["msg"]).to.eql("Input should be 'NOT_ANALYZED', 'NOT_ACCESSIBLE', 'CLARIFICATION_REQUIRED', 'FALSE_POSITIVE', 'TRUE_POSITIVE' or 'OUTDATED'");
              });
            form_raw: |-
              {
                "finding_ids": [
                  "test"
                ],
                "status": "test status",
                "comment": "Audited"
              }
          - name: Delete a finding which doesn't exist
            method: DELETE
            request: resc/v1/findings/:finding_id
            variables:
              - finding_id: 999
            status_code: 404
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"]).to.eql("Finding not found");
              });
          - name: Delete a finding with invalid ID
            method: DELETE
            request: resc/v1/findings/:finding_id
            variables:
              - finding_id: one
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
              });
          - name: Partially update a finding
            method: PATCH
            request: resc/v1/findings/:finding_id
            variables:
              - finding_id: "{{finding_id}}"
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");     
                  pm.expect(responseJson["file_path"]).to.eql("dummy_file.txt");
                  pm.expect(responseJson["line_number"]).to.eql(10);
                  pm.expect(responseJson["column_start"]).to.eql(1);
                  pm.expect(responseJson["column_end"]).to.eql(8);
                  pm.expect(responseJson["commit_id"]).to.eql("testcommit12345");
                  pm.expect(responseJson["commit_message"]).to.eql("test commit message");
                  pm.expect(responseJson["email"]).to.eql("test-author@mail.com");
                  pm.expect(responseJson["event_sent_on"]).to.include("2023-01-31T13");
                  pm.expect(responseJson["rule_name"]).to.eql("GitHub Personal Access Token");
                  pm.expect(responseJson["repository_id"]).to.eql(pm.environment.get("repository_id"));
                  pm.expect(responseJson["id_"]).to.eql(pm.environment.get("finding_id"));
                  pm.expect(responseJson["scan_ids"]).to.be.an("array");
                  pm.expect(responseJson["scan_ids"].length).to.eql(0);
              });
            form_raw: |-
              {
                "event_sent_on": "2023-01-31T13:31:25.388Z"
              }
          - name: Partially update a finding with invalid body
            method: PATCH
            request: resc/v1/findings/:finding_id
            variables:
              - finding_id: "{{finding_id}}"
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("datetime_from_date_parsing");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be a valid datetime or date, invalid date separator, expected `-`");
              });
            form_raw: |-
              {
                "event_sent_on": "2023/12/31"
              }
          - name: Partially update a finding with invalid ID
            method: PATCH
            request: resc/v1/findings/:finding_id
            variables:
              - finding_id: str
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
              });
            form_raw: |-
              {
                "event_sent_on": "2023-01-31T13:31:25.388Z"
              }
          - name: Partially update a finding with non existent ID
            method: PATCH
            request: resc/v1/findings/:finding_id
            variables:
              - finding_id: 999
            status_code: 404
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"]).to.eql("Finding not found");
              });
            form_raw: |-
              {
                "event_sent_on": "2023-01-31T13:31:25.388Z"
              }
          - name: Get audit(s) for finding
            method: GET
            request: resc/v1/findings/:finding_id/audit?skip=0&limit=100
            variables:
              - finding_id: "{{finding_id}}"
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  let today = new Date().toISOString().slice(0, 10)
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"][0]["id_"]).to.eql(3);
                  pm.expect(responseJson["data"][0]["status"]).to.eql("NOT_ANALYZED");
                  pm.expect(responseJson["data"][0]["auditor"]).to.eql("Anonymous");
                  pm.expect(responseJson["data"][0]["comment"]).to.eql("Audited");
                  pm.expect(responseJson["data"][0]["timestamp"]).to.include(today);
                  pm.expect(responseJson["total"]).to.eql(1);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get audit(s) for finding by non existent ID
            method: GET
            request: resc/v1/findings/:finding_id/audit?skip=0&limit=100
            variables:
              - finding_id: 999
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.eql([]);
                  pm.expect(responseJson["total"]).to.eql(0);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get audit(s) for finding by invalid ID
            method: GET
            request: resc/v1/findings/:finding_id/audit?skip=0&limit=100
            variables:
              - finding_id: invalid
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
              });
          - name: Get all detailed findings
            method: GET
            request: resc/v1/detailed-findings?skip=0&limit=100
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array");
                  pm.expect(responseJson["data"][6]["file_path"]).to.eql("dummy_file.txt");
                  pm.expect(responseJson["data"][6]["line_number"]).to.eql(10);
                  pm.expect(responseJson["data"][6]["column_start"]).to.eql(1);
                  pm.expect(responseJson["data"][6]["column_end"]).to.eql(8);
                  pm.expect(responseJson["data"][6]["commit_id"]).to.eql("testcommit12345");
                  pm.expect(responseJson["data"][6]["commit_message"]).to.eql("test commit message");
                  pm.expect(responseJson["data"][6]["commit_timestamp"]).to.include("2023-01-30T23");
                  pm.expect(responseJson["data"][6]["author"]).to.eql("test-author");
                  pm.expect(responseJson["data"][6]["email"]).to.eql("test-author@mail.com");
                  pm.expect(responseJson["data"][6]["status"]).to.eql("NOT_ANALYZED");
                  pm.expect(responseJson["data"][6]["comment"]).to.eql("");
                  pm.expect(responseJson["data"][6]["rule_name"]).to.eql("private-key");
                  pm.expect(responseJson["data"][6]["rule_pack"]).to.eql("1.0.0");
                  pm.expect(responseJson["data"][6]["project_key"]).to.eql("test-project");
                  pm.expect(responseJson["data"][6]["repository_name"]).to.eql("test-repository");
                  pm.expect(responseJson["data"][6]["repository_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository");
                  pm.expect(responseJson["data"][6]["timestamp"].substring(0, 10)).to.eql(pm.environment.get("currentdate").substring(0, 10));
                  pm.expect(responseJson["data"][6]["vcs_provider"]).to.eql("AZURE_DEVOPS");
                  pm.expect(responseJson["data"][6]["last_scanned_commit"]).to.eql("testcommit12345");
                  pm.expect(responseJson["data"][6]["scan_id"]).to.eql(pm.environment.get("scan_id"));
                  pm.expect(responseJson["data"][6]["event_sent_on"]).to.eql(null);
                  pm.expect(responseJson["data"][6]["id_"]).to.eql(7);
                  pm.expect(responseJson["total"]).to.eql(7);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get all detailed findings with rule filter
            method: GET
            request: resc/v1/detailed-findings?skip=0&limit=100&query_string=rule_names=["private-key"]
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array");
                  pm.expect(responseJson["data"][0]).to.be.an("object");
                  pm.expect(responseJson["data"][0]["file_path"]).to.eql("dummy_file.txt");
                  pm.expect(responseJson["data"][0]["line_number"]).to.eql(10);
                  pm.expect(responseJson["data"][0]["column_start"]).to.eql(1);
                  pm.expect(responseJson["data"][0]["column_end"]).to.eql(8);
                  pm.expect(responseJson["data"][0]["commit_id"]).to.eql("testcommit12345");
                  pm.expect(responseJson["data"][0]["commit_message"]).to.eql("test commit message");
                  pm.expect(responseJson["data"][0]["commit_timestamp"]).to.include("2023-01-30T23");
                  pm.expect(responseJson["data"][0]["author"]).to.eql("test-author");
                  pm.expect(responseJson["data"][0]["email"]).to.eql("test-author@mail.com");
                  pm.expect(responseJson["data"][0]["status"]).to.eql("NOT_ANALYZED");
                  pm.expect(responseJson["data"][0]["comment"]).to.eql("");
                  pm.expect(responseJson["data"][0]["rule_name"]).to.eql("private-key");
                  pm.expect(responseJson["data"][0]["rule_pack"]).to.eql("1.0.0");
                  pm.expect(responseJson["data"][0]["project_key"]).to.eql("test-project");
                  pm.expect(responseJson["data"][0]["repository_name"]).to.eql("test-repository");
                  pm.expect(responseJson["data"][0]["repository_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository");
                  pm.expect(responseJson["data"][0]["timestamp"].substring(0, 10)).to.eql(pm.environment.get("currentdate").substring(0, 10));
                  pm.expect(responseJson["data"][0]["vcs_provider"]).to.eql("AZURE_DEVOPS");
                  pm.expect(responseJson["data"][0]["last_scanned_commit"]).to.eql("testcommit12345");
                  pm.expect(responseJson["data"][0]["commit_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository/commit/testcommit12345?path=/dummy_file.txt&line=10&lineEnd=11&lineStartColumn=1&lineEndColumn=1&type=2&lineStyle=plain");
                  pm.expect(responseJson["data"][0]["scan_id"]).to.eql(pm.environment.get("scan_id"));
                  pm.expect(responseJson["data"][0]["event_sent_on"]).to.eql(null);
                  pm.expect(responseJson["data"][0]["id_"]).to.be.greaterThan(0);
                  pm.expect(responseJson["data"][0]["id_"]).to.eql(7);
                  pm.expect(responseJson["total"]).to.eql(1);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get all detailed findings with status filter
            method: GET
            request: resc/v1/detailed-findings?skip=0&limit=100&query_string=finding_statuses=["NOT_ANALYZED"]
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array");
                  pm.expect(responseJson["data"][5]).to.be.an("object");
                  pm.expect(responseJson["data"][5]["file_path"]).to.eql("dummy_file.txt");
                  pm.expect(responseJson["data"][5]["line_number"]).to.eql(10);
                  pm.expect(responseJson["data"][5]["column_start"]).to.eql(1);
                  pm.expect(responseJson["data"][5]["column_end"]).to.eql(8);
                  pm.expect(responseJson["data"][5]["commit_id"]).to.eql("testcommit12345");
                  pm.expect(responseJson["data"][5]["commit_message"]).to.eql("test commit message");
                  pm.expect(responseJson["data"][5]["commit_timestamp"]).to.include("2023-01-30T23");
                  pm.expect(responseJson["data"][5]["author"]).to.eql("test-author");
                  pm.expect(responseJson["data"][5]["email"]).to.eql("test-author@mail.com");
                  pm.expect(responseJson["data"][5]["status"]).to.eql("NOT_ANALYZED");
                  pm.expect(responseJson["data"][5]["comment"]).to.eql("");
                  pm.expect(responseJson["data"][5]["rule_name"]).to.eql("private-key");
                  pm.expect(responseJson["data"][5]["rule_pack"]).to.eql("1.0.0");
                  pm.expect(responseJson["data"][5]["project_key"]).to.eql("test-project");
                  pm.expect(responseJson["data"][5]["repository_name"]).to.eql("test-repository");
                  pm.expect(responseJson["data"][5]["repository_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository");
                  pm.expect(responseJson["data"][5]["timestamp"].substring(0, 10)).to.eql(pm.environment.get("currentdate").substring(0, 10));
                  pm.expect(responseJson["data"][5]["vcs_provider"]).to.eql("AZURE_DEVOPS");
                  pm.expect(responseJson["data"][5]["last_scanned_commit"]).to.eql("testcommit12345");
                  pm.expect(responseJson["data"][5]["commit_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository/commit/testcommit12345?path=/dummy_file.txt&line=10&lineEnd=11&lineStartColumn=1&lineEndColumn=1&type=2&lineStyle=plain");
                  pm.expect(responseJson["data"][5]["scan_id"]).to.eql(pm.environment.get("scan_id"));
                  pm.expect(responseJson["data"][5]["event_sent_on"]).to.eql(null);
                  pm.expect(responseJson["data"][5]["id_"]).to.be.greaterThan(0);
                  pm.expect(responseJson["data"][5]["id_"]).to.eql(7);
                  pm.expect(responseJson["total"]).to.eql(6);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get all detailed findings with rule pack filter
            method: GET
            request: resc/v1/detailed-findings?skip=0&limit=100&query_string=rule_pack_versions=["1.0.0"]
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array");
                  pm.expect(responseJson["data"][6]).to.be.an("object");
                  pm.expect(responseJson["data"][6]["file_path"]).to.eql("dummy_file.txt");
                  pm.expect(responseJson["data"][6]["line_number"]).to.eql(10);
                  pm.expect(responseJson["data"][6]["column_start"]).to.eql(1);
                  pm.expect(responseJson["data"][6]["column_end"]).to.eql(8);
                  pm.expect(responseJson["data"][6]["commit_id"]).to.eql("testcommit12345");
                  pm.expect(responseJson["data"][6]["commit_message"]).to.eql("test commit message");
                  pm.expect(responseJson["data"][6]["commit_timestamp"]).to.include("2023-01-30T23");
                  pm.expect(responseJson["data"][6]["author"]).to.eql("test-author");
                  pm.expect(responseJson["data"][6]["email"]).to.eql("test-author@mail.com");
                  pm.expect(responseJson["data"][6]["status"]).to.eql("NOT_ANALYZED");
                  pm.expect(responseJson["data"][6]["comment"]).to.eql("");
                  pm.expect(responseJson["data"][6]["rule_name"]).to.eql("private-key");
                  pm.expect(responseJson["data"][6]["rule_pack"]).to.eql("1.0.0");
                  pm.expect(responseJson["data"][6]["project_key"]).to.eql("test-project");
                  pm.expect(responseJson["data"][6]["repository_name"]).to.eql("test-repository");
                  pm.expect(responseJson["data"][6]["repository_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository");
                  pm.expect(responseJson["data"][6]["timestamp"].substring(0, 10)).to.eql(pm.environment.get("currentdate").substring(0, 10));
                  pm.expect(responseJson["data"][6]["vcs_provider"]).to.eql("AZURE_DEVOPS");
                  pm.expect(responseJson["data"][6]["last_scanned_commit"]).to.eql("testcommit12345");
                  pm.expect(responseJson["data"][6]["commit_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository/commit/testcommit12345?path=/dummy_file.txt&line=10&lineEnd=11&lineStartColumn=1&lineEndColumn=1&type=2&lineStyle=plain");
                  pm.expect(responseJson["data"][6]["scan_id"]).to.eql(pm.environment.get("scan_id"));
                  pm.expect(responseJson["data"][6]["event_sent_on"]).to.eql(null);
                  pm.expect(responseJson["data"][6]["id_"]).to.be.greaterThan(0);
                  pm.expect(responseJson["data"][6]["id_"]).to.eql(7);
                  pm.expect(responseJson["total"]).to.eql(7);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get all detailed findings with vcs provider filter
            method: GET
            request: resc/v1/detailed-findings?skip=0&limit=100&query_string=vcs_providers=["AZURE_DEVOPS"]
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array");
                  pm.expect(responseJson["data"][6]).to.be.an("object");
                  pm.expect(responseJson["data"][6]["file_path"]).to.eql("dummy_file.txt");
                  pm.expect(responseJson["data"][6]["line_number"]).to.eql(10);
                  pm.expect(responseJson["data"][6]["column_start"]).to.eql(1);
                  pm.expect(responseJson["data"][6]["column_end"]).to.eql(8);
                  pm.expect(responseJson["data"][6]["commit_id"]).to.eql("testcommit12345");
                  pm.expect(responseJson["data"][6]["commit_message"]).to.eql("test commit message");
                  pm.expect(responseJson["data"][6]["commit_timestamp"]).to.include("2023-01-30T23");
                  pm.expect(responseJson["data"][6]["author"]).to.eql("test-author");
                  pm.expect(responseJson["data"][6]["email"]).to.eql("test-author@mail.com");
                  pm.expect(responseJson["data"][6]["status"]).to.eql("NOT_ANALYZED");
                  pm.expect(responseJson["data"][6]["comment"]).to.eql("");
                  pm.expect(responseJson["data"][6]["rule_name"]).to.eql("private-key");
                  pm.expect(responseJson["data"][6]["rule_pack"]).to.eql("1.0.0");
                  pm.expect(responseJson["data"][6]["project_key"]).to.eql("test-project");
                  pm.expect(responseJson["data"][6]["repository_name"]).to.eql("test-repository");
                  pm.expect(responseJson["data"][6]["repository_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository");
                  pm.expect(responseJson["data"][6]["timestamp"].substring(0, 10)).to.eql(pm.environment.get("currentdate").substring(0, 10));
                  pm.expect(responseJson["data"][6]["vcs_provider"]).to.eql("AZURE_DEVOPS");
                  pm.expect(responseJson["data"][6]["last_scanned_commit"]).to.eql("testcommit12345");
                  pm.expect(responseJson["data"][6]["commit_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository/commit/testcommit12345?path=/dummy_file.txt&line=10&lineEnd=11&lineStartColumn=1&lineEndColumn=1&type=2&lineStyle=plain");
                  pm.expect(responseJson["data"][6]["scan_id"]).to.eql(pm.environment.get("scan_id"));
                  pm.expect(responseJson["data"][6]["event_sent_on"]).to.eql(null);
                  pm.expect(responseJson["data"][6]["id_"]).to.be.greaterThan(0);
                  pm.expect(responseJson["data"][6]["id_"]).to.eql(7);
                  pm.expect(responseJson["total"]).to.eql(7);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get all detailed findings with project name filter
            method: GET
            request: resc/v1/detailed-findings?skip=0&limit=100&query_string=project_name=test-project
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array");
                  pm.expect(responseJson["data"][0]).to.be.an("object");
                  pm.expect(responseJson["data"][0]["file_path"]).to.eql("dummy_file.txt");
                  pm.expect(responseJson["data"][0]["line_number"]).to.eql(10);
                  pm.expect(responseJson["data"][0]["column_start"]).to.eql(1);
                  pm.expect(responseJson["data"][0]["column_end"]).to.eql(8);
                  pm.expect(responseJson["data"][0]["commit_id"]).to.eql("testcommit12345");
                  pm.expect(responseJson["data"][0]["commit_message"]).to.eql("test commit message");
                  pm.expect(responseJson["data"][0]["commit_timestamp"]).to.include("2023-01-30T23");
                  pm.expect(responseJson["data"][0]["author"]).to.eql("test-author");
                  pm.expect(responseJson["data"][0]["email"]).to.eql("test-author@mail.com");
                  pm.expect(responseJson["data"][0]["status"]).to.eql("NOT_ANALYZED");
                  pm.expect(responseJson["data"][0]["comment"]).to.eql("");
                  pm.expect(responseJson["data"][0]["rule_name"]).to.eql("private-key");
                  pm.expect(responseJson["data"][0]["rule_pack"]).to.eql("1.0.0");
                  pm.expect(responseJson["data"][0]["project_key"]).to.eql("test-project");
                  pm.expect(responseJson["data"][0]["repository_name"]).to.eql("test-repository");
                  pm.expect(responseJson["data"][0]["repository_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository");
                  pm.expect(responseJson["data"][0]["timestamp"].substring(0, 10)).to.eql(pm.environment.get("currentdate").substring(0, 10));
                  pm.expect(responseJson["data"][0]["vcs_provider"]).to.eql("AZURE_DEVOPS");
                  pm.expect(responseJson["data"][0]["last_scanned_commit"]).to.eql("testcommit12345");
                  pm.expect(responseJson["data"][0]["commit_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository/commit/testcommit12345?path=/dummy_file.txt&line=10&lineEnd=11&lineStartColumn=1&lineEndColumn=1&type=2&lineStyle=plain");
                  pm.expect(responseJson["data"][0]["scan_id"]).to.eql(pm.environment.get("scan_id"));
                  pm.expect(responseJson["data"][0]["event_sent_on"]).to.eql(null);
                  pm.expect(responseJson["data"][0]["id_"]).to.be.greaterThan(0);
                  pm.expect(responseJson["data"][0]["id_"]).to.eql(7);
                  pm.expect(responseJson["total"]).to.eql(1);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get all detailed findings with repository name filter
            method: GET
            request: resc/v1/detailed-findings?skip=0&limit=100&query_string=repository_name=test-repository
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array");
                  pm.expect(responseJson["data"][0]).to.be.an("object");
                  pm.expect(responseJson["data"][0]["file_path"]).to.eql("dummy_file.txt");
                  pm.expect(responseJson["data"][0]["line_number"]).to.eql(10);
                  pm.expect(responseJson["data"][0]["column_start"]).to.eql(1);
                  pm.expect(responseJson["data"][0]["column_end"]).to.eql(8);
                  pm.expect(responseJson["data"][0]["commit_id"]).to.eql("testcommit12345");
                  pm.expect(responseJson["data"][0]["commit_message"]).to.eql("test commit message");
                  pm.expect(responseJson["data"][0]["commit_timestamp"]).to.include("2023-01-30T23");
                  pm.expect(responseJson["data"][0]["author"]).to.eql("test-author");
                  pm.expect(responseJson["data"][0]["email"]).to.eql("test-author@mail.com");
                  pm.expect(responseJson["data"][0]["status"]).to.eql("NOT_ANALYZED");
                  pm.expect(responseJson["data"][0]["comment"]).to.eql("");
                  pm.expect(responseJson["data"][0]["rule_name"]).to.eql("private-key");
                  pm.expect(responseJson["data"][0]["rule_pack"]).to.eql("1.0.0");
                  pm.expect(responseJson["data"][0]["project_key"]).to.eql("test-project");
                  pm.expect(responseJson["data"][0]["repository_name"]).to.eql("test-repository");
                  pm.expect(responseJson["data"][0]["repository_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository");
                  pm.expect(responseJson["data"][0]["timestamp"].substring(0, 10)).to.eql(pm.environment.get("currentdate").substring(0, 10));
                  pm.expect(responseJson["data"][0]["vcs_provider"]).to.eql("AZURE_DEVOPS");
                  pm.expect(responseJson["data"][0]["last_scanned_commit"]).to.eql("testcommit12345");
                  pm.expect(responseJson["data"][0]["commit_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository/commit/testcommit12345?path=/dummy_file.txt&line=10&lineEnd=11&lineStartColumn=1&lineEndColumn=1&type=2&lineStyle=plain");
                  pm.expect(responseJson["data"][0]["scan_id"]).to.eql(pm.environment.get("scan_id"));
                  pm.expect(responseJson["data"][0]["event_sent_on"]).to.eql(null);
                  pm.expect(responseJson["data"][0]["id_"]).to.be.greaterThan(0);
                  pm.expect(responseJson["data"][0]["id_"]).to.eql(7);
                  pm.expect(responseJson["total"]).to.eql(1);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get all detailed findings with scan  start date filter
            method: GET
            request: resc/v1/detailed-findings?skip=0&limit=100&query_string=start_date_time=2020-04-13T00:00:00
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array");
                  pm.expect(responseJson["data"][6]).to.be.an("object");
                  pm.expect(responseJson["data"][6]["file_path"]).to.eql("dummy_file.txt");
                  pm.expect(responseJson["data"][6]["line_number"]).to.eql(10);
                  pm.expect(responseJson["data"][6]["column_start"]).to.eql(1);
                  pm.expect(responseJson["data"][6]["column_end"]).to.eql(8);
                  pm.expect(responseJson["data"][6]["commit_id"]).to.eql("testcommit12345");
                  pm.expect(responseJson["data"][6]["commit_message"]).to.eql("test commit message");
                  pm.expect(responseJson["data"][6]["commit_timestamp"]).to.include("2023-01-30T23");
                  pm.expect(responseJson["data"][6]["author"]).to.eql("test-author");
                  pm.expect(responseJson["data"][6]["email"]).to.eql("test-author@mail.com");
                  pm.expect(responseJson["data"][6]["status"]).to.eql("NOT_ANALYZED");
                  pm.expect(responseJson["data"][6]["comment"]).to.eql("");
                  pm.expect(responseJson["data"][6]["rule_name"]).to.eql("private-key");
                  pm.expect(responseJson["data"][6]["rule_pack"]).to.eql("1.0.0");
                  pm.expect(responseJson["data"][6]["project_key"]).to.eql("test-project");
                  pm.expect(responseJson["data"][6]["repository_name"]).to.eql("test-repository");
                  pm.expect(responseJson["data"][6]["repository_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository");
                  pm.expect(responseJson["data"][6]["vcs_provider"]).to.eql("AZURE_DEVOPS");
                  pm.expect(responseJson["data"][6]["last_scanned_commit"]).to.eql("testcommit12345");
                  pm.expect(responseJson["data"][6]["commit_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository/commit/testcommit12345?path=/dummy_file.txt&line=10&lineEnd=11&lineStartColumn=1&lineEndColumn=1&type=2&lineStyle=plain");
                  pm.expect(responseJson["data"][6]["scan_id"]).to.eql(pm.environment.get("scan_id"));
                  pm.expect(responseJson["data"][6]["event_sent_on"]).to.eql(null);
                  pm.expect(responseJson["data"][6]["id_"]).to.be.greaterThan(0);
                  pm.expect(responseJson["data"][6]["id_"]).to.eql(7);
                  pm.expect(responseJson["total"]).to.eql(7);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
          - name: Get all detailed findings with scan  start date and end date filter
            method: GET
            request: resc/v1/detailed-findings?skip=0&limit=100&query_string=start_date_time=2020-04-13T00:00:00%26end_date_time={{end_date_time}}
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array");
                  pm.expect(responseJson["data"][6]).to.be.an("object");
                  pm.expect(responseJson["data"][6]["file_path"]).to.eql("dummy_file.txt");
                  pm.expect(responseJson["data"][6]["line_number"]).to.eql(10);
                  pm.expect(responseJson["data"][6]["column_start"]).to.eql(1);
                  pm.expect(responseJson["data"][6]["column_end"]).to.eql(8);
                  pm.expect(responseJson["data"][6]["commit_id"]).to.eql("testcommit12345");
                  pm.expect(responseJson["data"][6]["commit_message"]).to.eql("test commit message");
                  pm.expect(responseJson["data"][6]["commit_timestamp"]).to.include("2023-01-30T23");
                  pm.expect(responseJson["data"][6]["author"]).to.eql("test-author");
                  pm.expect(responseJson["data"][6]["email"]).to.eql("test-author@mail.com");
                  pm.expect(responseJson["data"][6]["status"]).to.eql("NOT_ANALYZED");
                  pm.expect(responseJson["data"][6]["comment"]).to.eql("");
                  pm.expect(responseJson["data"][6]["rule_name"]).to.eql("private-key");
                  pm.expect(responseJson["data"][6]["rule_pack"]).to.eql("1.0.0");
                  pm.expect(responseJson["data"][6]["project_key"]).to.eql("test-project");
                  pm.expect(responseJson["data"][6]["repository_name"]).to.eql("test-repository");
                  pm.expect(responseJson["data"][6]["repository_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository");
                  pm.expect(responseJson["data"][6]["timestamp"].substring(0, 10)).to.eql(pm.environment.get("currentdate").substring(0, 10));
                  pm.expect(responseJson["data"][6]["vcs_provider"]).to.eql("AZURE_DEVOPS");
                  pm.expect(responseJson["data"][6]["last_scanned_commit"]).to.eql("testcommit12345");
                  pm.expect(responseJson["data"][6]["commit_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository/commit/testcommit12345?path=/dummy_file.txt&line=10&lineEnd=11&lineStartColumn=1&lineEndColumn=1&type=2&lineStyle=plain");
                  pm.expect(responseJson["data"][6]["scan_id"]).to.eql(pm.environment.get("scan_id"));
                  pm.expect(responseJson["data"][6]["event_sent_on"]).to.eql(null);
                  pm.expect(responseJson["data"][6]["id_"]).to.be.greaterThan(0);
                  pm.expect(responseJson["data"][6]["id_"]).to.eql(7);
              
                  pm.expect(responseJson["total"]).to.eql(7);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
            prerequest: |-
              let today = new Date();
              today.setDate(today.getDate() + 1);
              end_date_time = today.toISOString().split('T')[0]+'T00:00:00';
              pm.environment.set('end_date_time', end_date_time);
          - name: Get all detailed findings with all filters
            method: GET
            request: resc/v1/detailed-findings?skip=0&limit=100&query_string=rule_names=["private-key"]%26finding_statuses=["NOT_ANALYZED"]%26vcs_providers=["AZURE_DEVOPS"]%26project_name=test-project%26repository_name=test-repository%26start_date_time=2020-04-13T00:00:00%26end_date_time={{end_date_time}}%26rule_pack_versions=["1.0.0"]
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["data"]).to.be.an("array");
                  pm.expect(responseJson["data"][0]).to.be.an("object");
                  pm.expect(responseJson["data"][0]["file_path"]).to.eql("dummy_file.txt");
                  pm.expect(responseJson["data"][0]["line_number"]).to.eql(10);
                  pm.expect(responseJson["data"][0]["column_start"]).to.eql(1);
                  pm.expect(responseJson["data"][0]["column_end"]).to.eql(8);
                  pm.expect(responseJson["data"][0]["commit_id"]).to.eql("testcommit12345");
                  pm.expect(responseJson["data"][0]["commit_message"]).to.eql("test commit message");
                  pm.expect(responseJson["data"][0]["commit_timestamp"]).to.include("2023-01-30T23");
                  pm.expect(responseJson["data"][0]["author"]).to.eql("test-author");
                  pm.expect(responseJson["data"][0]["email"]).to.eql("test-author@mail.com");
                  pm.expect(responseJson["data"][0]["status"]).to.eql("NOT_ANALYZED");
                  pm.expect(responseJson["data"][0]["comment"]).to.eql("");
                  pm.expect(responseJson["data"][0]["rule_name"]).to.eql("private-key");
                  pm.expect(responseJson["data"][0]["rule_pack"]).to.eql("1.0.0");
                  pm.expect(responseJson["data"][0]["project_key"]).to.eql("test-project");
                  pm.expect(responseJson["data"][0]["repository_name"]).to.eql("test-repository");
                  pm.expect(responseJson["data"][0]["repository_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository");
                  pm.expect(responseJson["data"][0]["timestamp"].substring(0, 10)).to.eql(pm.environment.get("currentdate").substring(0, 10));
                  pm.expect(responseJson["data"][0]["vcs_provider"]).to.eql("AZURE_DEVOPS");
                  pm.expect(responseJson["data"][0]["last_scanned_commit"]).to.eql("testcommit12345");
                  pm.expect(responseJson["data"][0]["commit_url"]).to.eql("https://dev.azure.com/test-org/test-project/_git/test-repository/commit/testcommit12345?path=/dummy_file.txt&line=10&lineEnd=11&lineStartColumn=1&lineEndColumn=1&type=2&lineStyle=plain");
                  pm.expect(responseJson["data"][0]["scan_id"]).to.eql(pm.environment.get("scan_id"));
                  pm.expect(responseJson["data"][0]["event_sent_on"]).to.eql(null);
                  pm.expect(responseJson["data"][0]["id_"]).to.be.greaterThan(0);
                  pm.expect(responseJson["data"][0]["id_"]).to.eql(7);
                  pm.expect(responseJson["total"]).to.eql(1);
                  pm.expect(responseJson["limit"]).to.eql(100);
                  pm.expect(responseJson["skip"]).to.eql(0);
              });
            prerequest: |-
              let today = new Date();
              today.setDate(today.getDate() + 1);
              end_date_time = today.toISOString().split('T')[0]+'T00:00:00';
              pm.environment.set('end_date_time', end_date_time);
          - name: Get detailed finding by its ID
            method: GET
            request: resc/v1/detailed-findings/:finding_id
            variables:
              - finding_id: 1
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["file_path"]).to.eql("application.txt");
                  pm.expect(responseJson["line_number"]).to.eql(1);
                  pm.expect(responseJson["column_start"]).to.eql(1);
                  pm.expect(responseJson["column_end"]).to.eql(100);
                  pm.expect(responseJson["commit_id"]).to.eql("qwerty1");
                  pm.expect(responseJson["commit_message"]).to.eql("this is commit 1");
                  pm.expect(responseJson["commit_timestamp"]).to.include("2023-01-01");
                  pm.expect(responseJson["author"]).to.eql("developer");
                  pm.expect(responseJson["email"]).to.eql("developer@abc.com");
                  pm.expect(responseJson["status"]).to.eql("TRUE_POSITIVE");
                  pm.expect(responseJson["comment"]).to.eql("It is a true positive issue");
                  pm.expect(responseJson["rule_name"]).to.eql("github-oauth");
                  pm.expect(responseJson["rule_pack"]).to.eql("1.0.0");
                  pm.expect(responseJson["project_key"]).to.eql("ado-project1");
                  pm.expect(responseJson["repository_name"]).to.eql("resc-dummy1");
                  pm.expect(responseJson["repository_url"]).to.eql("https://fake-dev.azure.com/ado-org/ado-project1/_git/resc-dummy1");
                  // pm.expect(responseJson["timestamp"].to.eql("2023-07-14T00:00:00"));
                  pm.expect(responseJson["vcs_provider"]).to.eql("AZURE_DEVOPS");
                  pm.expect(responseJson["last_scanned_commit"]).to.eql("qwerty1");
                  pm.expect(responseJson["scan_id"]).to.eql(3);
                  pm.expect(responseJson["event_sent_on"]).to.eql(null);
                  pm.expect(responseJson["commit_url"]).to.eql("https://fake-dev.azure.com/ado-org/ado-project1/_git/resc-dummy1/commit/qwerty1?path=/application.txt&line=1&lineEnd=2&lineStartColumn=1&lineEndColumn=1&type=2&lineStyle=plain");
                  pm.expect(responseJson["id_"]).to.eql(1);
              });
          - name: Get detailed finding by non existent ID
            method: GET
            request: resc/v1/detailed-findings/:finding_id
            variables:
              - finding_id: 999
            status_code: 404
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"]).to.eql("Finding not found");
              });
          - name: Get detailed finding by invalid ID
            method: GET
            request: resc/v1/detailed-findings/:finding_id
            variables:
              - finding_id: invalid
            status_code: 422
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["detail"][0]["type"]).to.eql("int_parsing");
                  pm.expect(responseJson["detail"][0]["msg"]).to.eql("Input should be a valid integer, unable to parse string as an integer");
              });
      - name: rules
        item:
          - name: Get unique rules from findings
            method: GET
            request: resc/v1/detected-rules
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array");
                  pm.expect(responseJson.length).to.eql(4);
                  pm.expect(responseJson).to.eql(["GitHub Personal Access Token","github-oauth","github-pat","private-key"] );
              });
          - name: Get unique rules from rule-pack
            method: GET
            request: resc/v1/detected-rules?rule_pack_version=1.0.0
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array");
                  pm.expect(responseJson.length).to.eql(3);
                  pm.expect(responseJson).to.eql(["github-oauth","github-pat","private-key"] );
              });
          - name: Get detected rules with counts per status
            method: GET
            request: resc/v1/rules/finding-status-count
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array");
              
                  responseJson.forEach((obj) => {
                  	if (obj.rule_name === "private-key"){
                          pm.expect(obj.rule_name).to.eql("private-key");
                          pm.expect(obj.finding_count).to.eql(1);
                          obj.finding_statuses_count.forEach((statusObj) => {
                              if(statusObj.status === "TRUE_POSITIVE"){
                                  pm.expect(statusObj.status).to.eql("TRUE_POSITIVE");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                              if(statusObj.status === "FALSE_POSITIVE"){
                                  pm.expect(statusObj.status).to.eql("FALSE_POSITIVE");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                              if(statusObj.status === "NOT_ANALYZED"){
                                  pm.expect(statusObj.status).to.eql("NOT_ANALYZED");
                                  pm.expect(statusObj.count).to.eql(1);
                              }
                              if(statusObj.status === "NOT_ACCESSIBLE"){
                                  pm.expect(statusObj.status).to.eql("NOT_ACCESSIBLE");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                              if(statusObj.status === "CLARIFICATION_REQUIRED"){
                                  pm.expect(statusObj.status).to.eql("CLARIFICATION_REQUIRED");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                          });
                      }
              
                      if (obj.rule_name === "GitHub Personal Access Token"){
                          pm.expect(obj.rule_name).to.eql("GitHub Personal Access Token");
                          pm.expect(obj.finding_count).to.eql(1);
                          obj.finding_statuses_count.forEach((statusObj) => {
                              if(statusObj.status === "TRUE_POSITIVE"){
                                  pm.expect(statusObj.status).to.eql("TRUE_POSITIVE");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                              if(statusObj.status === "FALSE_POSITIVE"){
                                  pm.expect(statusObj.status).to.eql("FALSE_POSITIVE");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                              if(statusObj.status === "NOT_ANALYZED"){
                                  pm.expect(statusObj.status).to.eql("NOT_ANALYZED");
                                  pm.expect(statusObj.count).to.eql(1);
                              }
                              if(statusObj.status === "NOT_ACCESSIBLE"){
                                  pm.expect(statusObj.status).to.eql("NOT_ACCESSIBLE");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                              if(statusObj.status === "CLARIFICATION_REQUIRED"){
                                  pm.expect(statusObj.status).to.eql("CLARIFICATION_REQUIRED");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                          });
                      }
              
                  });
              
              });
          - name: Get detected rules with counts per status with single rule pack in filter
            method: GET
            request: resc/v1/rules/finding-status-count?rule_pack_version=1.0.0
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array");
              
                  responseJson.forEach((obj) => {
                  	if (obj.rule_name === "private-key"){
                          pm.expect(obj.rule_name).to.eql("private-key");
                          pm.expect(obj.finding_count).to.eql(1);
                          obj.finding_statuses_count.forEach((statusObj) => {
                              if(statusObj.status === "TRUE_POSITIVE"){
                                  pm.expect(statusObj.status).to.eql("TRUE_POSITIVE");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                              if(statusObj.status === "FALSE_POSITIVE"){
                                  pm.expect(statusObj.status).to.eql("FALSE_POSITIVE");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                              if(statusObj.status === "NOT_ANALYZED"){
                                  pm.expect(statusObj.status).to.eql("NOT_ANALYZED");
                                  pm.expect(statusObj.count).to.eql(1);
                              }
                              if(statusObj.status === "NOT_ACCESSIBLE"){
                                  pm.expect(statusObj.status).to.eql("NOT_ACCESSIBLE");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                              if(statusObj.status === "CLARIFICATION_REQUIRED"){
                                  pm.expect(statusObj.status).to.eql("CLARIFICATION_REQUIRED");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                          });
                      }
              
                      if (obj.rule_name === "GitHub Personal Access Token"){
                          pm.expect(obj.rule_name).to.eql("GitHub Personal Access Token");
                          pm.expect(obj.finding_count).to.eql(1);
                          obj.finding_statuses_count.forEach((statusObj) => {
                              if(statusObj.status === "TRUE_POSITIVE"){
                                  pm.expect(statusObj.status).to.eql("TRUE_POSITIVE");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                              if(statusObj.status === "FALSE_POSITIVE"){
                                  pm.expect(statusObj.status).to.eql("FALSE_POSITIVE");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                              if(statusObj.status === "NOT_ANALYZED"){
                                  pm.expect(statusObj.status).to.eql("NOT_ANALYZED");
                                  pm.expect(statusObj.count).to.eql(1);
                              }
                              if(statusObj.status === "NOT_ACCESSIBLE"){
                                  pm.expect(statusObj.status).to.eql("NOT_ACCESSIBLE");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                              if(statusObj.status === "CLARIFICATION_REQUIRED"){
                                  pm.expect(statusObj.status).to.eql("CLARIFICATION_REQUIRED");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                          });
                      }
              
                  });
              
              });
          - name: Get detected rules with counts per status with single rule pack in filter and tag filter
            method: GET
            request: resc/v1/rules/finding-status-count?rule_pack_version=1.0.0&rule_tag=Warn
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array");
              
                  responseJson.forEach((obj) => {
                  	if (obj.rule_name === "private-key"){
                          pm.expect(obj.rule_name).to.eql("private-key");
                          pm.expect(obj.finding_count).to.eql(1);
                          obj.finding_statuses_count.forEach((statusObj) => {
                              if(statusObj.status === "TRUE_POSITIVE"){
                                  pm.expect(statusObj.status).to.eql("TRUE_POSITIVE");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                              if(statusObj.status === "FALSE_POSITIVE"){
                                  pm.expect(statusObj.status).to.eql("FALSE_POSITIVE");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                              if(statusObj.status === "NOT_ANALYZED"){
                                  pm.expect(statusObj.status).to.eql("NOT_ANALYZED");
                                  pm.expect(statusObj.count).to.eql(1);
                              }
                              if(statusObj.status === "NOT_ACCESSIBLE"){
                                  pm.expect(statusObj.status).to.eql("NOT_ACCESSIBLE");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                              if(statusObj.status === "CLARIFICATION_REQUIRED"){
                                  pm.expect(statusObj.status).to.eql("CLARIFICATION_REQUIRED");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                          });
                      }
              
                      if (obj.rule_name === "GitHub Personal Access Token"){
                          pm.expect(obj.rule_name).to.eql("GitHub Personal Access Token");
                          pm.expect(obj.finding_count).to.eql(1);
                          obj.finding_statuses_count.forEach((statusObj) => {
                              if(statusObj.status === "TRUE_POSITIVE"){
                                  pm.expect(statusObj.status).to.eql("TRUE_POSITIVE");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                              if(statusObj.status === "FALSE_POSITIVE"){
                                  pm.expect(statusObj.status).to.eql("FALSE_POSITIVE");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                              if(statusObj.status === "NOT_ANALYZED"){
                                  pm.expect(statusObj.status).to.eql("NOT_ANALYZED");
                                  pm.expect(statusObj.count).to.eql(1);
                              }
                              if(statusObj.status === "NOT_ACCESSIBLE"){
                                  pm.expect(statusObj.status).to.eql("NOT_ACCESSIBLE");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                              if(statusObj.status === "CLARIFICATION_REQUIRED"){
                                  pm.expect(statusObj.status).to.eql("CLARIFICATION_REQUIRED");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                          });
                      }
              
                  });
              
              });
          - name: Get detected rules with counts per status with multiple rule packs in filter
            method: GET
            request: resc/v1/rules/finding-status-count?rule_pack_version=1.0.0&rule_pack_version=1.0.1
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array");
              
                  responseJson.forEach((obj) => {
                  	if (obj.rule_name === "private-key"){
                          pm.expect(obj.rule_name).to.eql("private-key");
                          pm.expect(obj.finding_count).to.eql(1);
                          obj.finding_statuses_count.forEach((statusObj) => {
                              if(statusObj.status === "TRUE_POSITIVE"){
                                  pm.expect(statusObj.status).to.eql("TRUE_POSITIVE");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                              if(statusObj.status === "FALSE_POSITIVE"){
                                  pm.expect(statusObj.status).to.eql("FALSE_POSITIVE");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                              if(statusObj.status === "NOT_ANALYZED"){
                                  pm.expect(statusObj.status).to.eql("NOT_ANALYZED");
                                  pm.expect(statusObj.count).to.eql(1);
                              }
                              if(statusObj.status === "NOT_ACCESSIBLE"){
                                  pm.expect(statusObj.status).to.eql("NOT_ACCESSIBLE");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                              if(statusObj.status === "CLARIFICATION_REQUIRED"){
                                  pm.expect(statusObj.status).to.eql("CLARIFICATION_REQUIRED");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                          });
                      }
              
                      if (obj.rule_name === "GitHub Personal Access Token"){
                          pm.expect(obj.rule_name).to.eql("GitHub Personal Access Token");
                          pm.expect(obj.finding_count).to.eql(1);
                          obj.finding_statuses_count.forEach((statusObj) => {
                              if(statusObj.status === "TRUE_POSITIVE"){
                                  pm.expect(statusObj.status).to.eql("TRUE_POSITIVE");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                              if(statusObj.status === "FALSE_POSITIVE"){
                                  pm.expect(statusObj.status).to.eql("FALSE_POSITIVE");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                              if(statusObj.status === "NOT_ANALYZED"){
                                  pm.expect(statusObj.status).to.eql("NOT_ANALYZED");
                                  pm.expect(statusObj.count).to.eql(1);
                              }
                              if(statusObj.status === "NOT_ACCESSIBLE"){
                                  pm.expect(statusObj.status).to.eql("NOT_ACCESSIBLE");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                              if(statusObj.status === "CLARIFICATION_REQUIRED"){
                                  pm.expect(statusObj.status).to.eql("CLARIFICATION_REQUIRED");
                                  pm.expect(statusObj.count).to.eql(0);
                              }
                          });
                      }
              
                  });
              
              });
          - name: Get detected rules with counts per status with invalid rule pack in filter
            method: GET
            request: resc/v1/rules/finding-status-count?rule_pack_version=invalid
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array");
                  pm.expect(responseJson.length).to.eql(0);
              
              });
      - name: metrics
        item:
          - name: Get count of audit status over time for given weeks
            method: GET
            header:
              Accept: application/json
            request: resc/v1/metrics/audited-count-over-time
            status_code: 200
            response_time: 10000
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array");
                  pm.expect(responseJson.length).to.eql(13);
                  responseJson.forEach((obj) => {
                      pm.expect(obj).to.have.property('time_period');
                      pm.expect(obj).to.have.property('vcs_provider_finding_count');
                      pm.expect(obj.vcs_provider_finding_count).to.have.property('AZURE_DEVOPS');
                      pm.expect(obj.vcs_provider_finding_count).to.have.property('BITBUCKET');
                      pm.expect(obj.vcs_provider_finding_count).to.have.property('GITHUB_PUBLIC');
                      pm.expect(obj).to.have.property('total');
                  });
                  
              });
          - name: Get count of findings over time for given weeks
            method: GET
            header:
              Accept: application/json
            request: resc/v1/metrics/count-per-vcs-provider-by-week
            status_code: 200
            response_time: 10000
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array");
                  pm.expect(responseJson.length).to.eql(13);
                  responseJson.forEach((obj) => {
                      pm.expect(obj).to.have.property('time_period');
                      pm.expect(obj).to.have.property('vcs_provider_finding_count');
                      pm.expect(obj.vcs_provider_finding_count).to.have.property('AZURE_DEVOPS');
                      pm.expect(obj.vcs_provider_finding_count).to.have.property('BITBUCKET');
                      pm.expect(obj.vcs_provider_finding_count).to.have.property('GITHUB_PUBLIC');
                      pm.expect(obj).to.have.property('total');
                  });
                  
              });
          - name: Get count of findings over time for given weeks
            method: GET
            header:
              Accept: application/json
            request: resc/v1/metrics/un-triaged-count-over-time
            status_code: 200
            response_time: 10000
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array");
                  pm.expect(responseJson.length).to.eql(13);
                  responseJson.forEach((obj) => {
                      pm.expect(obj).to.have.property('time_period');
                      pm.expect(obj).to.have.property('vcs_provider_finding_count');
                      pm.expect(obj.vcs_provider_finding_count).to.have.property('AZURE_DEVOPS');
                      pm.expect(obj.vcs_provider_finding_count).to.have.property('BITBUCKET');
                      pm.expect(obj.vcs_provider_finding_count).to.have.property('GITHUB_PUBLIC');
                      pm.expect(obj).to.have.property('total');
                  });
                  
              });
          - name: Get count of auditds by auditer over time for given weeks
            method: GET
            request: resc/v1/metrics/audit-count-by-auditor-over-time
            status_code: 200
            response_time: 10000
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("array");
                  pm.expect(responseJson.length).to.eql(13);
                  responseJson.forEach((obj) => {
                      pm.expect(obj).to.have.property('time_period');
                      pm.expect(obj).to.have.property('audit_by_auditor_count');
                      pm.expect(obj).to.have.property('total');
                  });
                  
              });
          - name: Get Personal Audit Metrics
            method: GET
            request: resc/v1/metrics/personal-audits
            status_code: 200
            response_time: 10000
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.have.property('today');
                  pm.expect(responseJson).to.have.property('current_week');
                  pm.expect(responseJson).to.have.property('last_week');
                  pm.expect(responseJson).to.have.property('current_month');
                  pm.expect(responseJson).to.have.property('current_year');
                  pm.expect(responseJson).to.have.property('forever');
                  pm.expect(responseJson).to.have.property('rank_current_week');
              });
      - name: delete
        item:
          - name: Delete a finding
            method: DELETE
            request: resc/v1/findings/:finding_id
            variables:
              - finding_id: "{{finding_id}}"
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["ok"]).to.eql(true);
              });
              
              pm.test("Finding id doesn't exist", function() {
                  pm.environment.unset("finding_id");
                  pm.expect(pm.environment.get("finding_id")).to.eql(undefined);
              });
          - name: Delete a scan
            method: DELETE
            request: resc/v1/scans/:scan_id
            variables:
              - scan_id: "{{scan_id}}"
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["ok"]).to.eql(true);
              });
              
              pm.test("Scan id doesn't exist", function() {
                  pm.environment.unset("scan_id");
                  pm.expect(pm.environment.get("scan_id")).to.eql(undefined);
                  pm.environment.unset("currentdate");
                  pm.expect(pm.environment.get("currentdate")).to.eql(undefined);
                  pm.environment.unset("end_date_time");
                  pm.expect(pm.environment.get("end_date_time")).to.eql(undefined);
              });
          - name: Delete a repository
            method: DELETE
            request: resc/v1/repositories/:repository_id
            variables:
              - repository_id: "{{repository_id}}"
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["ok"]).to.eql(true);
              });
              
              pm.test("Repository id doesn't exist", function() {
                  pm.environment.unset("repository_id");
                  pm.expect(pm.environment.get("repository_id")).to.eql(undefined);
              });
          - name: Delete a vcs instance
            method: DELETE
            request: resc/v1/vcs-instances/:vcs_instance_id
            variables:
              - vcs_instance_id: "{{vcs_instance_id}}"
            status_code: 200
            response_time: 300
            tests: |-
              pm.test("Response body matches", function() {
                  pm.expect(responseJson).to.be.an("object");
                  pm.expect(responseJson["ok"]).to.eql(true);
              });
              
              pm.test("VCS instance id doesn't exist", function() {
                  pm.environment.unset("vcs_instance_id");
                  pm.expect(pm.environment.get("vcs_instance_id")).to.eql(undefined);
              });
variable:
  - key: baseUrl
    value: /
    type: string